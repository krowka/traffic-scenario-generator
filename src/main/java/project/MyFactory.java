package project;

import project.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Sun May 17 12:58:32 CEST 2020 by kamsz
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://webprotege.stanford.edu/absolute_discharge
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/absolute_discharge", Absolute_discharge.class, DefaultAbsolute_discharge.class);
    }

    /**
     * Creates an instance of type Absolute_discharge.  Modifies the underlying ontology.
     */
    public Absolute_discharge createAbsolute_discharge(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ABSOLUTE_DISCHARGE, DefaultAbsolute_discharge.class);
    }

    /**
     * Gets an instance of type Absolute_discharge with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Absolute_discharge getAbsolute_discharge(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ABSOLUTE_DISCHARGE, DefaultAbsolute_discharge.class);
    }

    /**
     * Gets all instances of Absolute_discharge from the ontology.
     */
    public Collection<? extends Absolute_discharge> getAllAbsolute_dischargeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ABSOLUTE_DISCHARGE, DefaultAbsolute_discharge.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/accelerate
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/accelerate", Accelerate.class, DefaultAccelerate.class);
    }

    /**
     * Creates an instance of type Accelerate.  Modifies the underlying ontology.
     */
    public Accelerate createAccelerate(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACCELERATE, DefaultAccelerate.class);
    }

    /**
     * Gets an instance of type Accelerate with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Accelerate getAccelerate(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACCELERATE, DefaultAccelerate.class);
    }

    /**
     * Gets all instances of Accelerate from the ontology.
     */
    public Collection<? extends Accelerate> getAllAccelerateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACCELERATE, DefaultAccelerate.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/action
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/action", Action.class, DefaultAction.class);
    }

    /**
     * Creates an instance of type Action.  Modifies the underlying ontology.
     */
    public Action createAction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACTION, DefaultAction.class);
    }

    /**
     * Gets an instance of type Action with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Action getAction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACTION, DefaultAction.class);
    }

    /**
     * Gets all instances of Action from the ontology.
     */
    public Collection<? extends Action> getAllActionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACTION, DefaultAction.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/adult
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/adult", Adult.class, DefaultAdult.class);
    }

    /**
     * Creates an instance of type Adult.  Modifies the underlying ontology.
     */
    public Adult createAdult(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ADULT, DefaultAdult.class);
    }

    /**
     * Gets an instance of type Adult with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Adult getAdult(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ADULT, DefaultAdult.class);
    }

    /**
     * Gets all instances of Adult from the ontology.
     */
    public Collection<? extends Adult> getAllAdultInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ADULT, DefaultAdult.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/age
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/age", Age.class, DefaultAge.class);
    }

    /**
     * Creates an instance of type Age.  Modifies the underlying ontology.
     */
    public Age createAge(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AGE, DefaultAge.class);
    }

    /**
     * Gets an instance of type Age with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Age getAge(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AGE, DefaultAge.class);
    }

    /**
     * Gets all instances of Age from the ontology.
     */
    public Collection<? extends Age> getAllAgeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AGE, DefaultAge.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/alley
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/alley", Alley.class, DefaultAlley.class);
    }

    /**
     * Creates an instance of type Alley.  Modifies the underlying ontology.
     */
    public Alley createAlley(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ALLEY, DefaultAlley.class);
    }

    /**
     * Gets an instance of type Alley with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Alley getAlley(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ALLEY, DefaultAlley.class);
    }

    /**
     * Gets all instances of Alley from the ontology.
     */
    public Collection<? extends Alley> getAllAlleyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ALLEY, DefaultAlley.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/ambulance
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/ambulance", Ambulance.class, DefaultAmbulance.class);
    }

    /**
     * Creates an instance of type Ambulance.  Modifies the underlying ontology.
     */
    public Ambulance createAmbulance(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AMBULANCE, DefaultAmbulance.class);
    }

    /**
     * Gets an instance of type Ambulance with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ambulance getAmbulance(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AMBULANCE, DefaultAmbulance.class);
    }

    /**
     * Gets all instances of Ambulance from the ontology.
     */
    public Collection<? extends Ambulance> getAllAmbulanceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AMBULANCE, DefaultAmbulance.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/animal
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/animal", Animal.class, DefaultAnimal.class);
    }

    /**
     * Creates an instance of type Animal.  Modifies the underlying ontology.
     */
    public Animal createAnimal(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANIMAL, DefaultAnimal.class);
    }

    public Animal createAnimalSubclass(String name) {
        return delegate.createSubclassWrappedIndividual(name, Vocabulary.CLASS_ANIMAL, DefaultAnimal.class);
    }

    /**
     * Gets an instance of type Animal with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Animal getAnimal(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANIMAL, DefaultAnimal.class);
    }

    /**
     * Gets all instances of Animal from the ontology.
     */
    public Collection<? extends Animal> getAllAnimalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANIMAL, DefaultAnimal.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/at_the_back
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/at_the_back", At_the_back.class, DefaultAt_the_back.class);
    }

    /**
     * Creates an instance of type At_the_back.  Modifies the underlying ontology.
     */
    public At_the_back createAt_the_back(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AT_THE_BACK, DefaultAt_the_back.class);
    }

    /**
     * Gets an instance of type At_the_back with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public At_the_back getAt_the_back(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AT_THE_BACK, DefaultAt_the_back.class);
    }

    /**
     * Gets all instances of At_the_back from the ontology.
     */
    public Collection<? extends At_the_back> getAllAt_the_backInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AT_THE_BACK, DefaultAt_the_back.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/baby_carriage
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/baby_carriage", Baby_carriage.class, DefaultBaby_carriage.class);
    }

    /**
     * Creates an instance of type Baby_carriage.  Modifies the underlying ontology.
     */
    public Baby_carriage createBaby_carriage(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BABY_CARRIAGE, DefaultBaby_carriage.class);
    }

    /**
     * Gets an instance of type Baby_carriage with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Baby_carriage getBaby_carriage(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BABY_CARRIAGE, DefaultBaby_carriage.class);
    }

    /**
     * Gets all instances of Baby_carriage from the ontology.
     */
    public Collection<? extends Baby_carriage> getAllBaby_carriageInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BABY_CARRIAGE, DefaultBaby_carriage.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/bar_on_road
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/bar_on_road", Bar_on_road.class, DefaultBar_on_road.class);
    }

    /**
     * Creates an instance of type Bar_on_road.  Modifies the underlying ontology.
     */
    public Bar_on_road createBar_on_road(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BAR_ON_ROAD, DefaultBar_on_road.class);
    }

    /**
     * Gets an instance of type Bar_on_road with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bar_on_road getBar_on_road(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BAR_ON_ROAD, DefaultBar_on_road.class);
    }

    /**
     * Gets all instances of Bar_on_road from the ontology.
     */
    public Collection<? extends Bar_on_road> getAllBar_on_roadInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BAR_ON_ROAD, DefaultBar_on_road.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/based_on_daytime
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/based_on_daytime", Based_on_daytime.class, DefaultBased_on_daytime.class);
    }

    /**
     * Creates an instance of type Based_on_daytime.  Modifies the underlying ontology.
     */
    public Based_on_daytime createBased_on_daytime(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BASED_ON_DAYTIME, DefaultBased_on_daytime.class);
    }

    /**
     * Gets an instance of type Based_on_daytime with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Based_on_daytime getBased_on_daytime(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BASED_ON_DAYTIME, DefaultBased_on_daytime.class);
    }

    /**
     * Gets all instances of Based_on_daytime from the ontology.
     */
    public Collection<? extends Based_on_daytime> getAllBased_on_daytimeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BASED_ON_DAYTIME, DefaultBased_on_daytime.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/based_on_road_segment
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/based_on_road_segment", Based_on_road_segment.class, DefaultBased_on_road_segment.class);
    }

    /**
     * Creates an instance of type Based_on_road_segment.  Modifies the underlying ontology.
     */
    public Based_on_road_segment createBased_on_road_segment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BASED_ON_ROAD_SEGMENT, DefaultBased_on_road_segment.class);
    }

    /**
     * Gets an instance of type Based_on_road_segment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Based_on_road_segment getBased_on_road_segment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BASED_ON_ROAD_SEGMENT, DefaultBased_on_road_segment.class);
    }

    /**
     * Gets all instances of Based_on_road_segment from the ontology.
     */
    public Collection<? extends Based_on_road_segment> getAllBased_on_road_segmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BASED_ON_ROAD_SEGMENT, DefaultBased_on_road_segment.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/based_on_type_of_road
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/based_on_type_of_road", Based_on_type_of_road.class, DefaultBased_on_type_of_road.class);
    }

    /**
     * Creates an instance of type Based_on_type_of_road.  Modifies the underlying ontology.
     */
    public Based_on_type_of_road createBased_on_type_of_road(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BASED_ON_TYPE_OF_ROAD, DefaultBased_on_type_of_road.class);
    }

    /**
     * Gets an instance of type Based_on_type_of_road with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Based_on_type_of_road getBased_on_type_of_road(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BASED_ON_TYPE_OF_ROAD, DefaultBased_on_type_of_road.class);
    }

    /**
     * Gets all instances of Based_on_type_of_road from the ontology.
     */
    public Collection<? extends Based_on_type_of_road> getAllBased_on_type_of_roadInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BASED_ON_TYPE_OF_ROAD, DefaultBased_on_type_of_road.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/bicycle
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/bicycle", Bicycle.class, DefaultBicycle.class);
    }

    /**
     * Creates an instance of type Bicycle.  Modifies the underlying ontology.
     */
    public Bicycle createBicycle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BICYCLE, DefaultBicycle.class);
    }

    /**
     * Gets an instance of type Bicycle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bicycle getBicycle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BICYCLE, DefaultBicycle.class);
    }

    /**
     * Gets all instances of Bicycle from the ontology.
     */
    public Collection<? extends Bicycle> getAllBicycleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BICYCLE, DefaultBicycle.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/bridge
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/bridge", Bridge.class, DefaultBridge.class);
    }

    /**
     * Creates an instance of type Bridge.  Modifies the underlying ontology.
     */
    public Bridge createBridge(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BRIDGE, DefaultBridge.class);
    }

    /**
     * Gets an instance of type Bridge with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bridge getBridge(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BRIDGE, DefaultBridge.class);
    }

    /**
     * Gets all instances of Bridge from the ontology.
     */
    public Collection<? extends Bridge> getAllBridgeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BRIDGE, DefaultBridge.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/burglary
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/burglary", Burglary.class, DefaultBurglary.class);
    }

    /**
     * Creates an instance of type Burglary.  Modifies the underlying ontology.
     */
    public Burglary createBurglary(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BURGLARY, DefaultBurglary.class);
    }

    /**
     * Gets an instance of type Burglary with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Burglary getBurglary(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BURGLARY, DefaultBurglary.class);
    }

    /**
     * Gets all instances of Burglary from the ontology.
     */
    public Collection<? extends Burglary> getAllBurglaryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BURGLARY, DefaultBurglary.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/bus
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/bus", Bus.class, DefaultBus.class);
    }

    /**
     * Creates an instance of type Bus.  Modifies the underlying ontology.
     */
    public Bus createBus(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUS, DefaultBus.class);
    }

    /**
     * Gets an instance of type Bus with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bus getBus(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUS, DefaultBus.class);
    }

    /**
     * Gets all instances of Bus from the ontology.
     */
    public Collection<? extends Bus> getAllBusInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUS, DefaultBus.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/bus_lane
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/bus_lane", Bus_lane.class, DefaultBus_lane.class);
    }

    /**
     * Creates an instance of type Bus_lane.  Modifies the underlying ontology.
     */
    public Bus_lane createBus_lane(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUS_LANE, DefaultBus_lane.class);
    }

    /**
     * Gets an instance of type Bus_lane with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bus_lane getBus_lane(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUS_LANE, DefaultBus_lane.class);
    }

    /**
     * Gets all instances of Bus_lane from the ontology.
     */
    public Collection<? extends Bus_lane> getAllBus_laneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUS_LANE, DefaultBus_lane.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/bushes
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/bushes", Bushes.class, DefaultBushes.class);
    }

    /**
     * Creates an instance of type Bushes.  Modifies the underlying ontology.
     */
    public Bushes createBushes(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUSHES, DefaultBushes.class);
    }

    /**
     * Gets an instance of type Bushes with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bushes getBushes(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUSHES, DefaultBushes.class);
    }

    /**
     * Gets all instances of Bushes from the ontology.
     */
    public Collection<? extends Bushes> getAllBushesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUSHES, DefaultBushes.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/car_car
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/car_car", Car_car.class, DefaultCar_car.class);
    }

    /**
     * Creates an instance of type Car_car.  Modifies the underlying ontology.
     */
    public Car_car createCar_car(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAR_CAR, DefaultCar_car.class);
    }

    /**
     * Gets an instance of type Car_car with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Car_car getCar_car(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAR_CAR, DefaultCar_car.class);
    }

    /**
     * Gets all instances of Car_car from the ontology.
     */
    public Collection<? extends Car_car> getAllCar_carInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAR_CAR, DefaultCar_car.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/car_pedestrian
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/car_pedestrian", Car_pedestrian.class, DefaultCar_pedestrian.class);
    }

    /**
     * Creates an instance of type Car_pedestrian.  Modifies the underlying ontology.
     */
    public Car_pedestrian createCar_pedestrian(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAR_PEDESTRIAN, DefaultCar_pedestrian.class);
    }

    /**
     * Gets an instance of type Car_pedestrian with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Car_pedestrian getCar_pedestrian(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAR_PEDESTRIAN, DefaultCar_pedestrian.class);
    }

    /**
     * Gets all instances of Car_pedestrian from the ontology.
     */
    public Collection<? extends Car_pedestrian> getAllCar_pedestrianInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAR_PEDESTRIAN, DefaultCar_pedestrian.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/cement_mixer
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/cement_mixer", Cement_mixer.class, DefaultCement_mixer.class);
    }

    /**
     * Creates an instance of type Cement_mixer.  Modifies the underlying ontology.
     */
    public Cement_mixer createCement_mixer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CEMENT_MIXER, DefaultCement_mixer.class);
    }

    /**
     * Gets an instance of type Cement_mixer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Cement_mixer getCement_mixer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CEMENT_MIXER, DefaultCement_mixer.class);
    }

    /**
     * Gets all instances of Cement_mixer from the ontology.
     */
    public Collection<? extends Cement_mixer> getAllCement_mixerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CEMENT_MIXER, DefaultCement_mixer.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/central_nature_strip
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/central_nature_strip", Central_nature_strip.class, DefaultCentral_nature_strip.class);
    }

    /**
     * Creates an instance of type Central_nature_strip.  Modifies the underlying ontology.
     */
    public Central_nature_strip createCentral_nature_strip(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CENTRAL_NATURE_STRIP, DefaultCentral_nature_strip.class);
    }

    /**
     * Gets an instance of type Central_nature_strip with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Central_nature_strip getCentral_nature_strip(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CENTRAL_NATURE_STRIP, DefaultCentral_nature_strip.class);
    }

    /**
     * Gets all instances of Central_nature_strip from the ontology.
     */
    public Collection<? extends Central_nature_strip> getAllCentral_nature_stripInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CENTRAL_NATURE_STRIP, DefaultCentral_nature_strip.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/change_speed
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/change_speed", Change_speed.class, DefaultChange_speed.class);
    }

    /**
     * Creates an instance of type Change_speed.  Modifies the underlying ontology.
     */
    public Change_speed createChange_speed(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHANGE_SPEED, DefaultChange_speed.class);
    }

    /**
     * Gets an instance of type Change_speed with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Change_speed getChange_speed(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHANGE_SPEED, DefaultChange_speed.class);
    }

    /**
     * Gets all instances of Change_speed from the ontology.
     */
    public Collection<? extends Change_speed> getAllChange_speedInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHANGE_SPEED, DefaultChange_speed.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/child
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/child", Child.class, DefaultChild.class);
    }

    /**
     * Creates an instance of type Child.  Modifies the underlying ontology.
     */
    public Child createChild(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHILD, DefaultChild.class);
    }

    /**
     * Gets an instance of type Child with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Child getChild(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHILD, DefaultChild.class);
    }

    /**
     * Gets all instances of Child from the ontology.
     */
    public Collection<? extends Child> getAllChildInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHILD, DefaultChild.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/city_streat
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/city_streat", City_streat.class, DefaultCity_streat.class);
    }

    /**
     * Creates an instance of type City_streat.  Modifies the underlying ontology.
     */
    public City_streat createCity_streat(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CITY_STREAT, DefaultCity_streat.class);
    }

    /**
     * Gets an instance of type City_streat with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public City_streat getCity_streat(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CITY_STREAT, DefaultCity_streat.class);
    }

    /**
     * Gets all instances of City_streat from the ontology.
     */
    public Collection<? extends City_streat> getAllCity_streatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CITY_STREAT, DefaultCity_streat.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/close
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/close", Close.class, DefaultClose.class);
    }

    /**
     * Creates an instance of type Close.  Modifies the underlying ontology.
     */
    public Close createClose(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CLOSE, DefaultClose.class);
    }

    /**
     * Gets an instance of type Close with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Close getClose(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CLOSE, DefaultClose.class);
    }

    /**
     * Gets all instances of Close from the ontology.
     */
    public Collection<? extends Close> getAllCloseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CLOSE, DefaultClose.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/condition
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/condition", Condition.class, DefaultCondition.class);
    }

    /**
     * Creates an instance of type Condition.  Modifies the underlying ontology.
     */
    public Condition createCondition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONDITION, DefaultCondition.class);
    }

    /**
     * Gets an instance of type Condition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Condition getCondition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONDITION, DefaultCondition.class);
    }

    /**
     * Gets all instances of Condition from the ontology.
     */
    public Collection<? extends Condition> getAllConditionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONDITION, DefaultCondition.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/conditional_discharge
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/conditional_discharge", Conditional_discharge.class, DefaultConditional_discharge.class);
    }

    /**
     * Creates an instance of type Conditional_discharge.  Modifies the underlying ontology.
     */
    public Conditional_discharge createConditional_discharge(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONDITIONAL_DISCHARGE, DefaultConditional_discharge.class);
    }

    /**
     * Gets an instance of type Conditional_discharge with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Conditional_discharge getConditional_discharge(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONDITIONAL_DISCHARGE, DefaultConditional_discharge.class);
    }

    /**
     * Gets all instances of Conditional_discharge from the ontology.
     */
    public Collection<? extends Conditional_discharge> getAllConditional_dischargeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONDITIONAL_DISCHARGE, DefaultConditional_discharge.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/conditional_sentence
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/conditional_sentence", Conditional_sentence.class, DefaultConditional_sentence.class);
    }

    /**
     * Creates an instance of type Conditional_sentence.  Modifies the underlying ontology.
     */
    public Conditional_sentence createConditional_sentence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONDITIONAL_SENTENCE, DefaultConditional_sentence.class);
    }

    /**
     * Gets an instance of type Conditional_sentence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Conditional_sentence getConditional_sentence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONDITIONAL_SENTENCE, DefaultConditional_sentence.class);
    }

    /**
     * Gets all instances of Conditional_sentence from the ontology.
     */
    public Collection<? extends Conditional_sentence> getAllConditional_sentenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONDITIONAL_SENTENCE, DefaultConditional_sentence.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/consequence
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/consequence", Consequence.class, DefaultConsequence.class);
    }

    /**
     * Creates an instance of type Consequence.  Modifies the underlying ontology.
     */
    public Consequence createConsequence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONSEQUENCE, DefaultConsequence.class);
    }

    /**
     * Gets an instance of type Consequence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Consequence getConsequence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONSEQUENCE, DefaultConsequence.class);
    }

    /**
     * Gets all instances of Consequence from the ontology.
     */
    public Collection<? extends Consequence> getAllConsequenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONSEQUENCE, DefaultConsequence.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/criminal_damage
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/criminal_damage", Criminal_damage.class, DefaultCriminal_damage.class);
    }

    /**
     * Creates an instance of type Criminal_damage.  Modifies the underlying ontology.
     */
    public Criminal_damage createCriminal_damage(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CRIMINAL_DAMAGE, DefaultCriminal_damage.class);
    }

    /**
     * Gets an instance of type Criminal_damage with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Criminal_damage getCriminal_damage(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CRIMINAL_DAMAGE, DefaultCriminal_damage.class);
    }

    /**
     * Gets all instances of Criminal_damage from the ontology.
     */
    public Collection<? extends Criminal_damage> getAllCriminal_damageInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CRIMINAL_DAMAGE, DefaultCriminal_damage.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/criminal_record
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/criminal_record", Criminal_record.class, DefaultCriminal_record.class);
    }

    /**
     * Creates an instance of type Criminal_record.  Modifies the underlying ontology.
     */
    public Criminal_record createCriminal_record(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CRIMINAL_RECORD, DefaultCriminal_record.class);
    }

    /**
     * Gets an instance of type Criminal_record with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Criminal_record getCriminal_record(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CRIMINAL_RECORD, DefaultCriminal_record.class);
    }

    /**
     * Gets all instances of Criminal_record from the ontology.
     */
    public Collection<? extends Criminal_record> getAllCriminal_recordInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CRIMINAL_RECORD, DefaultCriminal_record.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/cross_the_street
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/cross_the_street", Cross_the_street.class, DefaultCross_the_street.class);
    }

    /**
     * Creates an instance of type Cross_the_street.  Modifies the underlying ontology.
     */
    public Cross_the_street createCross_the_street(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CROSS_THE_STREET, DefaultCross_the_street.class);
    }

    /**
     * Gets an instance of type Cross_the_street with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Cross_the_street getCross_the_street(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CROSS_THE_STREET, DefaultCross_the_street.class);
    }

    /**
     * Gets all instances of Cross_the_street from the ontology.
     */
    public Collection<? extends Cross_the_street> getAllCross_the_streetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CROSS_THE_STREET, DefaultCross_the_street.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/crosswalking
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/crosswalking", Crosswalking.class, DefaultCrosswalking.class);
    }

    /**
     * Creates an instance of type Crosswalking.  Modifies the underlying ontology.
     */
    public Crosswalking createCrosswalking(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CROSSWALKING, DefaultCrosswalking.class);
    }

    /**
     * Gets an instance of type Crosswalking with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Crosswalking getCrosswalking(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CROSSWALKING, DefaultCrosswalking.class);
    }

    /**
     * Gets all instances of Crosswalking from the ontology.
     */
    public Collection<? extends Crosswalking> getAllCrosswalkingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CROSSWALKING, DefaultCrosswalking.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/cycling_path
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/cycling_path", Cycling_path.class, DefaultCycling_path.class);
    }

    /**
     * Creates an instance of type Cycling_path.  Modifies the underlying ontology.
     */
    public Cycling_path createCycling_path(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CYCLING_PATH, DefaultCycling_path.class);
    }

    /**
     * Gets an instance of type Cycling_path with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Cycling_path getCycling_path(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CYCLING_PATH, DefaultCycling_path.class);
    }

    /**
     * Gets all instances of Cycling_path from the ontology.
     */
    public Collection<? extends Cycling_path> getAllCycling_pathInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CYCLING_PATH, DefaultCycling_path.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/daytime
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/daytime", Daytime.class, DefaultDaytime.class);
    }

    /**
     * Creates an instance of type Daytime.  Modifies the underlying ontology.
     */
    public Daytime createDaytime(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DAYTIME, DefaultDaytime.class);
    }

    /**
     * Gets an instance of type Daytime with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Daytime getDaytime(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DAYTIME, DefaultDaytime.class);
    }

    /**
     * Gets all instances of Daytime from the ontology.
     */
    public Collection<? extends Daytime> getAllDaytimeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DAYTIME, DefaultDaytime.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/decision
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/decision", Decision.class, DefaultDecision.class);
    }

    /**
     * Creates an instance of type Decision.  Modifies the underlying ontology.
     */
    public Decision createDecision(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DECISION, DefaultDecision.class);
    }

    /**
     * Gets an instance of type Decision with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Decision getDecision(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DECISION, DefaultDecision.class);
    }

    /**
     * Gets all instances of Decision from the ontology.
     */
    public Collection<? extends Decision> getAllDecisionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DECISION, DefaultDecision.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/dirt_track
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/dirt_track", Dirt_track.class, DefaultDirt_track.class);
    }

    /**
     * Creates an instance of type Dirt_track.  Modifies the underlying ontology.
     */
    public Dirt_track createDirt_track(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIRT_TRACK, DefaultDirt_track.class);
    }

    /**
     * Gets an instance of type Dirt_track with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Dirt_track getDirt_track(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIRT_TRACK, DefaultDirt_track.class);
    }

    /**
     * Gets all instances of Dirt_track from the ontology.
     */
    public Collection<? extends Dirt_track> getAllDirt_trackInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIRT_TRACK, DefaultDirt_track.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/distance
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/distance", Distance.class, DefaultDistance.class);
    }

    /**
     * Creates an instance of type Distance.  Modifies the underlying ontology.
     */
    public Distance createDistance(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DISTANCE, DefaultDistance.class);
    }

    /**
     * Gets an instance of type Distance with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Distance getDistance(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DISTANCE, DefaultDistance.class);
    }

    /**
     * Gets all instances of Distance from the ontology.
     */
    public Collection<? extends Distance> getAllDistanceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DISTANCE, DefaultDistance.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/ditch
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/ditch", Ditch.class, DefaultDitch.class);
    }

    /**
     * Creates an instance of type Ditch.  Modifies the underlying ontology.
     */
    public Ditch createDitch(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DITCH, DefaultDitch.class);
    }

    /**
     * Gets an instance of type Ditch with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ditch getDitch(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DITCH, DefaultDitch.class);
    }

    /**
     * Gets all instances of Ditch from the ontology.
     */
    public Collection<? extends Ditch> getAllDitchInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DITCH, DefaultDitch.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/driver
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/driver", Driver.class, DefaultDriver.class);
    }

    /**
     * Creates an instance of type Driver.  Modifies the underlying ontology.
     */
    public Driver createDriver(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DRIVER, DefaultDriver.class);
    }

    /**
     * Gets an instance of type Driver with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Driver getDriver(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DRIVER, DefaultDriver.class);
    }

    /**
     * Gets all instances of Driver from the ontology.
     */
    public Collection<? extends Driver> getAllDriverInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DRIVER, DefaultDriver.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/driver_action
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/driver_action", Driver_action.class, DefaultDriver_action.class);
    }

    /**
     * Creates an instance of type Driver_action.  Modifies the underlying ontology.
     */
    public Driver_action createDriver_action(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DRIVER_ACTION, DefaultDriver_action.class);
    }

    /**
     * Gets an instance of type Driver_action with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Driver_action getDriver_action(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DRIVER_ACTION, DefaultDriver_action.class);
    }

    /**
     * Gets all instances of Driver_action from the ontology.
     */
    public Collection<? extends Driver_action> getAllDriver_actionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DRIVER_ACTION, DefaultDriver_action.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/driving_course
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/driving_course", Driving_course.class, DefaultDriving_course.class);
    }

    /**
     * Creates an instance of type Driving_course.  Modifies the underlying ontology.
     */
    public Driving_course createDriving_course(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DRIVING_COURSE, DefaultDriving_course.class);
    }

    /**
     * Gets an instance of type Driving_course with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Driving_course getDriving_course(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DRIVING_COURSE, DefaultDriving_course.class);
    }

    /**
     * Gets all instances of Driving_course from the ontology.
     */
    public Collection<? extends Driving_course> getAllDriving_courseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DRIVING_COURSE, DefaultDriving_course.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/driving_offences
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/driving_offences", Driving_offences.class, DefaultDriving_offences.class);
    }

    /**
     * Creates an instance of type Driving_offences.  Modifies the underlying ontology.
     */
    public Driving_offences createDriving_offences(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DRIVING_OFFENCES, DefaultDriving_offences.class);
    }

    /**
     * Gets an instance of type Driving_offences with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Driving_offences getDriving_offences(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DRIVING_OFFENCES, DefaultDriving_offences.class);
    }

    /**
     * Gets all instances of Driving_offences from the ontology.
     */
    public Collection<? extends Driving_offences> getAllDriving_offencesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DRIVING_OFFENCES, DefaultDriving_offences.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/drug_offences
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/drug_offences", Drug_offences.class, DefaultDrug_offences.class);
    }

    /**
     * Creates an instance of type Drug_offences.  Modifies the underlying ontology.
     */
    public Drug_offences createDrug_offences(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DRUG_OFFENCES, DefaultDrug_offences.class);
    }

    /**
     * Gets an instance of type Drug_offences with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Drug_offences getDrug_offences(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DRUG_OFFENCES, DefaultDrug_offences.class);
    }

    /**
     * Gets all instances of Drug_offences from the ontology.
     */
    public Collection<? extends Drug_offences> getAllDrug_offencesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DRUG_OFFENCES, DefaultDrug_offences.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/dump_truck
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/dump_truck", Dump_truck.class, DefaultDump_truck.class);
    }

    /**
     * Creates an instance of type Dump_truck.  Modifies the underlying ontology.
     */
    public Dump_truck createDump_truck(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DUMP_TRUCK, DefaultDump_truck.class);
    }

    /**
     * Gets an instance of type Dump_truck with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Dump_truck getDump_truck(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DUMP_TRUCK, DefaultDump_truck.class);
    }

    /**
     * Gets all instances of Dump_truck from the ontology.
     */
    public Collection<? extends Dump_truck> getAllDump_truckInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DUMP_TRUCK, DefaultDump_truck.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/elderly
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/elderly", Elderly.class, DefaultElderly.class);
    }

    /**
     * Creates an instance of type Elderly.  Modifies the underlying ontology.
     */
    public Elderly createElderly(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELDERLY, DefaultElderly.class);
    }

    /**
     * Gets an instance of type Elderly with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Elderly getElderly(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELDERLY, DefaultElderly.class);
    }

    /**
     * Gets all instances of Elderly from the ontology.
     */
    public Collection<? extends Elderly> getAllElderlyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELDERLY, DefaultElderly.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/emergency_lane
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/emergency_lane", Emergency_lane.class, DefaultEmergency_lane.class);
    }

    /**
     * Creates an instance of type Emergency_lane.  Modifies the underlying ontology.
     */
    public Emergency_lane createEmergency_lane(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EMERGENCY_LANE, DefaultEmergency_lane.class);
    }

    /**
     * Gets an instance of type Emergency_lane with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Emergency_lane getEmergency_lane(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EMERGENCY_LANE, DefaultEmergency_lane.class);
    }

    /**
     * Gets all instances of Emergency_lane from the ontology.
     */
    public Collection<? extends Emergency_lane> getAllEmergency_laneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EMERGENCY_LANE, DefaultEmergency_lane.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/evening
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/evening", Evening.class, DefaultEvening.class);
    }

    /**
     * Creates an instance of type Evening.  Modifies the underlying ontology.
     */
    public Evening createEvening(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EVENING, DefaultEvening.class);
    }

    /**
     * Gets an instance of type Evening with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Evening getEvening(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EVENING, DefaultEvening.class);
    }

    /**
     * Gets all instances of Evening from the ontology.
     */
    public Collection<? extends Evening> getAllEveningInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EVENING, DefaultEvening.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/expressway
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/expressway", Expressway.class, DefaultExpressway.class);
    }

    /**
     * Creates an instance of type Expressway.  Modifies the underlying ontology.
     */
    public Expressway createExpressway(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EXPRESSWAY, DefaultExpressway.class);
    }

    /**
     * Gets an instance of type Expressway with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Expressway getExpressway(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EXPRESSWAY, DefaultExpressway.class);
    }

    /**
     * Gets all instances of Expressway from the ontology.
     */
    public Collection<? extends Expressway> getAllExpresswayInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EXPRESSWAY, DefaultExpressway.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/far_away
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/far_away", Far_away.class, DefaultFar_away.class);
    }

    /**
     * Creates an instance of type Far_away.  Modifies the underlying ontology.
     */
    public Far_away createFar_away(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FAR_AWAY, DefaultFar_away.class);
    }

    /**
     * Gets an instance of type Far_away with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Far_away getFar_away(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FAR_AWAY, DefaultFar_away.class);
    }

    /**
     * Gets all instances of Far_away from the ontology.
     */
    public Collection<? extends Far_away> getAllFar_awayInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FAR_AWAY, DefaultFar_away.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/female
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/female", Female.class, DefaultFemale.class);
    }

    /**
     * Creates an instance of type Female.  Modifies the underlying ontology.
     */
    public Female createFemale(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FEMALE, DefaultFemale.class);
    }

    /**
     * Gets an instance of type Female with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Female getFemale(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FEMALE, DefaultFemale.class);
    }

    /**
     * Gets all instances of Female from the ontology.
     */
    public Collection<? extends Female> getAllFemaleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FEMALE, DefaultFemale.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/field
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/field", Field.class, DefaultField.class);
    }

    /**
     * Creates an instance of type Field.  Modifies the underlying ontology.
     */
    public Field createField(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FIELD, DefaultField.class);
    }

    /**
     * Gets an instance of type Field with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Field getField(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FIELD, DefaultField.class);
    }

    /**
     * Gets all instances of Field from the ontology.
     */
    public Collection<? extends Field> getAllFieldInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FIELD, DefaultField.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/fine
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/fine", Fine.class, DefaultFine.class);
    }

    /**
     * Creates an instance of type Fine.  Modifies the underlying ontology.
     */
    public Fine createFine(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FINE, DefaultFine.class);
    }

    /**
     * Gets an instance of type Fine with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fine getFine(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FINE, DefaultFine.class);
    }

    /**
     * Gets all instances of Fine from the ontology.
     */
    public Collection<? extends Fine> getAllFineInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FINE, DefaultFine.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/fire_engine
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/fire_engine", Fire_engine.class, DefaultFire_engine.class);
    }

    /**
     * Creates an instance of type Fire_engine.  Modifies the underlying ontology.
     */
    public Fire_engine createFire_engine(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FIRE_ENGINE, DefaultFire_engine.class);
    }

    /**
     * Gets an instance of type Fire_engine with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fire_engine getFire_engine(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FIRE_ENGINE, DefaultFire_engine.class);
    }

    /**
     * Gets all instances of Fire_engine from the ontology.
     */
    public Collection<? extends Fire_engine> getAllFire_engineInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FIRE_ENGINE, DefaultFire_engine.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/fog
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/fog", Fog.class, DefaultFog.class);
    }

    /**
     * Creates an instance of type Fog.  Modifies the underlying ontology.
     */
    public Fog createFog(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FOG, DefaultFog.class);
    }

    /**
     * Gets an instance of type Fog with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fog getFog(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FOG, DefaultFog.class);
    }

    /**
     * Gets all instances of Fog from the ontology.
     */
    public Collection<? extends Fog> getAllFogInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FOG, DefaultFog.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/follow
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/follow", Follow.class, DefaultFollow.class);
    }

    /**
     * Creates an instance of type Follow.  Modifies the underlying ontology.
     */
    public Follow createFollow(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FOLLOW, DefaultFollow.class);
    }

    /**
     * Gets an instance of type Follow with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Follow getFollow(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FOLLOW, DefaultFollow.class);
    }

    /**
     * Gets all instances of Follow from the ontology.
     */
    public Collection<? extends Follow> getAllFollowInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FOLLOW, DefaultFollow.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/forest
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/forest", Forest.class, DefaultForest.class);
    }

    /**
     * Creates an instance of type Forest.  Modifies the underlying ontology.
     */
    public Forest createForest(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FOREST, DefaultForest.class);
    }

    /**
     * Gets an instance of type Forest with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Forest getForest(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FOREST, DefaultForest.class);
    }

    /**
     * Gets all instances of Forest from the ontology.
     */
    public Collection<? extends Forest> getAllForestInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FOREST, DefaultForest.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/fraud
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/fraud", Fraud.class, DefaultFraud.class);
    }

    /**
     * Creates an instance of type Fraud.  Modifies the underlying ontology.
     */
    public Fraud createFraud(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FRAUD, DefaultFraud.class);
    }

    /**
     * Gets an instance of type Fraud with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fraud getFraud(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FRAUD, DefaultFraud.class);
    }

    /**
     * Gets all instances of Fraud from the ontology.
     */
    public Collection<? extends Fraud> getAllFraudInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FRAUD, DefaultFraud.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/gender
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/gender", Gender.class, DefaultGender.class);
    }

    /**
     * Creates an instance of type Gender.  Modifies the underlying ontology.
     */
    public Gender createGender(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GENDER, DefaultGender.class);
    }

    /**
     * Gets an instance of type Gender with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Gender getGender(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GENDER, DefaultGender.class);
    }

    /**
     * Gets all instances of Gender from the ontology.
     */
    public Collection<? extends Gender> getAllGenderInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GENDER, DefaultGender.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/glaze
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/glaze", Glaze.class, DefaultGlaze.class);
    }

    /**
     * Creates an instance of type Glaze.  Modifies the underlying ontology.
     */
    public Glaze createGlaze(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GLAZE, DefaultGlaze.class);
    }

    /**
     * Gets an instance of type Glaze with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Glaze getGlaze(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GLAZE, DefaultGlaze.class);
    }

    /**
     * Gets all instances of Glaze from the ontology.
     */
    public Collection<? extends Glaze> getAllGlazeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GLAZE, DefaultGlaze.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/green
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/green", Green.class, DefaultGreen.class);
    }

    /**
     * Creates an instance of type Green.  Modifies the underlying ontology.
     */
    public Green createGreen(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GREEN, DefaultGreen.class);
    }

    /**
     * Gets an instance of type Green with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Green getGreen(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GREEN, DefaultGreen.class);
    }

    /**
     * Gets all instances of Green from the ontology.
     */
    public Collection<? extends Green> getAllGreenInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GREEN, DefaultGreen.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/heavy_rain
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/heavy_rain", Heavy_rain.class, DefaultHeavy_rain.class);
    }

    /**
     * Creates an instance of type Heavy_rain.  Modifies the underlying ontology.
     */
    public Heavy_rain createHeavy_rain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HEAVY_RAIN, DefaultHeavy_rain.class);
    }

    /**
     * Gets an instance of type Heavy_rain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Heavy_rain getHeavy_rain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HEAVY_RAIN, DefaultHeavy_rain.class);
    }

    /**
     * Gets all instances of Heavy_rain from the ontology.
     */
    public Collection<? extends Heavy_rain> getAllHeavy_rainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HEAVY_RAIN, DefaultHeavy_rain.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/highway
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/highway", Highway.class, DefaultHighway.class);
    }

    /**
     * Creates an instance of type Highway.  Modifies the underlying ontology.
     */
    public Highway createHighway(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HIGHWAY, DefaultHighway.class);
    }

    /**
     * Gets an instance of type Highway with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Highway getHighway(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HIGHWAY, DefaultHighway.class);
    }

    /**
     * Gets all instances of Highway from the ontology.
     */
    public Collection<? extends Highway> getAllHighwayInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HIGHWAY, DefaultHighway.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/honk
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/honk", Honk.class, DefaultHonk.class);
    }

    /**
     * Creates an instance of type Honk.  Modifies the underlying ontology.
     */
    public Honk createHonk(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HONK, DefaultHonk.class);
    }

    /**
     * Gets an instance of type Honk with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Honk getHonk(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HONK, DefaultHonk.class);
    }

    /**
     * Gets all instances of Honk from the ontology.
     */
    public Collection<? extends Honk> getAllHonkInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HONK, DefaultHonk.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/horse_carriage
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/horse_carriage", Horse_carriage.class, DefaultHorse_carriage.class);
    }

    /**
     * Creates an instance of type Horse_carriage.  Modifies the underlying ontology.
     */
    public Horse_carriage createHorse_carriage(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HORSE_CARRIAGE, DefaultHorse_carriage.class);
    }

    /**
     * Gets an instance of type Horse_carriage with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Horse_carriage getHorse_carriage(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HORSE_CARRIAGE, DefaultHorse_carriage.class);
    }

    /**
     * Gets all instances of Horse_carriage from the ontology.
     */
    public Collection<? extends Horse_carriage> getAllHorse_carriageInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HORSE_CARRIAGE, DefaultHorse_carriage.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/human
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/human", Human.class, DefaultHuman.class);
    }

    /**
     * Creates an instance of type Human.  Modifies the underlying ontology.
     */
    public Human createHuman(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HUMAN, DefaultHuman.class);
    }

    /**
     * Gets an instance of type Human with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Human getHuman(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HUMAN, DefaultHuman.class);
    }

    /**
     * Gets all instances of Human from the ontology.
     */
    public Collection<? extends Human> getAllHumanInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HUMAN, DefaultHuman.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/human_profession
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/human_profession", Human_profession.class, DefaultHuman_profession.class);
    }

    /**
     * Creates an instance of type Human_profession.  Modifies the underlying ontology.
     */
    public Human_profession createHuman_profession(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HUMAN_PROFESSION, DefaultHuman_profession.class);
    }

    /**
     * Gets an instance of type Human_profession with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Human_profession getHuman_profession(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HUMAN_PROFESSION, DefaultHuman_profession.class);
    }

    /**
     * Gets all instances of Human_profession from the ontology.
     */
    public Collection<? extends Human_profession> getAllHuman_professionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HUMAN_PROFESSION, DefaultHuman_profession.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/illegal_pedestrian_crossings
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/illegal_pedestrian_crossings", Illegal_pedestrian_crossings.class, DefaultIllegal_pedestrian_crossings.class);
    }

    /**
     * Creates an instance of type Illegal_pedestrian_crossings.  Modifies the underlying ontology.
     */
    public Illegal_pedestrian_crossings createIllegal_pedestrian_crossings(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ILLEGAL_PEDESTRIAN_CROSSINGS, DefaultIllegal_pedestrian_crossings.class);
    }

    /**
     * Gets an instance of type Illegal_pedestrian_crossings with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Illegal_pedestrian_crossings getIllegal_pedestrian_crossings(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ILLEGAL_PEDESTRIAN_CROSSINGS, DefaultIllegal_pedestrian_crossings.class);
    }

    /**
     * Gets all instances of Illegal_pedestrian_crossings from the ontology.
     */
    public Collection<? extends Illegal_pedestrian_crossings> getAllIllegal_pedestrian_crossingsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ILLEGAL_PEDESTRIAN_CROSSINGS, DefaultIllegal_pedestrian_crossings.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/imprisonment
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/imprisonment", Imprisonment.class, DefaultImprisonment.class);
    }

    /**
     * Creates an instance of type Imprisonment.  Modifies the underlying ontology.
     */
    public Imprisonment createImprisonment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IMPRISONMENT, DefaultImprisonment.class);
    }

    /**
     * Gets an instance of type Imprisonment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Imprisonment getImprisonment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IMPRISONMENT, DefaultImprisonment.class);
    }

    /**
     * Gets all instances of Imprisonment from the ontology.
     */
    public Collection<? extends Imprisonment> getAllImprisonmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IMPRISONMENT, DefaultImprisonment.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/in_a_vehicle
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/in_a_vehicle", In_a_vehicle.class, DefaultIn_a_vehicle.class);
    }

    /**
     * Creates an instance of type In_a_vehicle.  Modifies the underlying ontology.
     */
    public In_a_vehicle createIn_a_vehicle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IN_A_VEHICLE, DefaultIn_a_vehicle.class);
    }

    /**
     * Gets an instance of type In_a_vehicle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public In_a_vehicle getIn_a_vehicle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IN_A_VEHICLE, DefaultIn_a_vehicle.class);
    }

    /**
     * Gets all instances of In_a_vehicle from the ontology.
     */
    public Collection<? extends In_a_vehicle> getAllIn_a_vehicleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IN_A_VEHICLE, DefaultIn_a_vehicle.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/in_the_front
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/in_the_front", In_the_front.class, DefaultIn_the_front.class);
    }

    /**
     * Creates an instance of type In_the_front.  Modifies the underlying ontology.
     */
    public In_the_front createIn_the_front(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IN_THE_FRONT, DefaultIn_the_front.class);
    }

    /**
     * Gets an instance of type In_the_front with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public In_the_front getIn_the_front(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IN_THE_FRONT, DefaultIn_the_front.class);
    }

    /**
     * Gets all instances of In_the_front from the ontology.
     */
    public Collection<? extends In_the_front> getAllIn_the_frontInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IN_THE_FRONT, DefaultIn_the_front.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/injured
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/injured", Injured.class, DefaultInjured.class);
    }

    /**
     * Creates an instance of type Injured.  Modifies the underlying ontology.
     */
    public Injured createInjured(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INJURED, DefaultInjured.class);
    }

    /**
     * Gets an instance of type Injured with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Injured getInjured(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INJURED, DefaultInjured.class);
    }

    /**
     * Gets all instances of Injured from the ontology.
     */
    public Collection<? extends Injured> getAllInjuredInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INJURED, DefaultInjured.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/intact
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/intact", Intact.class, DefaultIntact.class);
    }

    /**
     * Creates an instance of type Intact.  Modifies the underlying ontology.
     */
    public Intact createIntact(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INTACT, DefaultIntact.class);
    }

    /**
     * Gets an instance of type Intact with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Intact getIntact(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INTACT, DefaultIntact.class);
    }

    /**
     * Gets all instances of Intact from the ontology.
     */
    public Collection<? extends Intact> getAllIntactInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INTACT, DefaultIntact.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/intermittent_sentence
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/intermittent_sentence", Intermittent_sentence.class, DefaultIntermittent_sentence.class);
    }

    /**
     * Creates an instance of type Intermittent_sentence.  Modifies the underlying ontology.
     */
    public Intermittent_sentence createIntermittent_sentence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INTERMITTENT_SENTENCE, DefaultIntermittent_sentence.class);
    }

    /**
     * Gets an instance of type Intermittent_sentence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Intermittent_sentence getIntermittent_sentence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INTERMITTENT_SENTENCE, DefaultIntermittent_sentence.class);
    }

    /**
     * Gets all instances of Intermittent_sentence from the ontology.
     */
    public Collection<? extends Intermittent_sentence> getAllIntermittent_sentenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INTERMITTENT_SENTENCE, DefaultIntermittent_sentence.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/jaywalking
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/jaywalking", Jaywalking.class, DefaultJaywalking.class);
    }

    /**
     * Creates an instance of type Jaywalking.  Modifies the underlying ontology.
     */
    public Jaywalking createJaywalking(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_JAYWALKING, DefaultJaywalking.class);
    }

    /**
     * Gets an instance of type Jaywalking with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Jaywalking getJaywalking(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_JAYWALKING, DefaultJaywalking.class);
    }

    /**
     * Gets all instances of Jaywalking from the ontology.
     */
    public Collection<? extends Jaywalking> getAllJaywalkingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_JAYWALKING, DefaultJaywalking.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/killed
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/killed", Killed.class, DefaultKilled.class);
    }

    /**
     * Creates an instance of type Killed.  Modifies the underlying ontology.
     */
    public Killed createKilled(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_KILLED, DefaultKilled.class);
    }

    /**
     * Gets an instance of type Killed with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Killed getKilled(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_KILLED, DefaultKilled.class);
    }

    /**
     * Gets all instances of Killed from the ontology.
     */
    public Collection<? extends Killed> getAllKilledInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_KILLED, DefaultKilled.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/laws
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/laws", Laws.class, DefaultLaws.class);
    }

    /**
     * Creates an instance of type Laws.  Modifies the underlying ontology.
     */
    public Laws createLaws(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LAWS, DefaultLaws.class);
    }

    /**
     * Gets an instance of type Laws with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Laws getLaws(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LAWS, DefaultLaws.class);
    }

    /**
     * Gets all instances of Laws from the ontology.
     */
    public Collection<? extends Laws> getAllLawsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LAWS, DefaultLaws.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/left_hand_traffic
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/left_hand_traffic", Left_hand_traffic.class, DefaultLeft_hand_traffic.class);
    }

    /**
     * Creates an instance of type Left_hand_traffic.  Modifies the underlying ontology.
     */
    public Left_hand_traffic createLeft_hand_traffic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEFT_HAND_TRAFFIC, DefaultLeft_hand_traffic.class);
    }

    /**
     * Gets an instance of type Left_hand_traffic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Left_hand_traffic getLeft_hand_traffic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEFT_HAND_TRAFFIC, DefaultLeft_hand_traffic.class);
    }

    /**
     * Gets all instances of Left_hand_traffic from the ontology.
     */
    public Collection<? extends Left_hand_traffic> getAllLeft_hand_trafficInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEFT_HAND_TRAFFIC, DefaultLeft_hand_traffic.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/legal_pedestrian_crossings
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/legal_pedestrian_crossings", Legal_pedestrian_crossings.class, DefaultLegal_pedestrian_crossings.class);
    }

    /**
     * Creates an instance of type Legal_pedestrian_crossings.  Modifies the underlying ontology.
     */
    public Legal_pedestrian_crossings createLegal_pedestrian_crossings(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEGAL_PEDESTRIAN_CROSSINGS, DefaultLegal_pedestrian_crossings.class);
    }

    /**
     * Gets an instance of type Legal_pedestrian_crossings with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Legal_pedestrian_crossings getLegal_pedestrian_crossings(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEGAL_PEDESTRIAN_CROSSINGS, DefaultLegal_pedestrian_crossings.class);
    }

    /**
     * Gets all instances of Legal_pedestrian_crossings from the ontology.
     */
    public Collection<? extends Legal_pedestrian_crossings> getAllLegal_pedestrian_crossingsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEGAL_PEDESTRIAN_CROSSINGS, DefaultLegal_pedestrian_crossings.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/living_entity
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/living_entity", Living_entity.class, DefaultLiving_entity.class);
    }

    /**
     * Creates an instance of type Living_entity.  Modifies the underlying ontology.
     */
    public Living_entity createLiving_entity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LIVING_ENTITY, DefaultLiving_entity.class);
    }

    /**
     * Gets an instance of type Living_entity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Living_entity getLiving_entity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LIVING_ENTITY, DefaultLiving_entity.class);
    }

    /**
     * Gets all instances of Living_entity from the ontology.
     */
    public Collection<? extends Living_entity> getAllLiving_entityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LIVING_ENTITY, DefaultLiving_entity.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/location
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/location", Location.class, DefaultLocation.class);
    }

    /**
     * Creates an instance of type Location.  Modifies the underlying ontology.
     */
    public Location createLocation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOCATION, DefaultLocation.class);
    }

    /**
     * Gets an instance of type Location with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Location getLocation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOCATION, DefaultLocation.class);
    }

    /**
     * Gets all instances of Location from the ontology.
     */
    public Collection<? extends Location> getAllLocationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOCATION, DefaultLocation.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/male
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/male", Male.class, DefaultMale.class);
    }

    /**
     * Creates an instance of type Male.  Modifies the underlying ontology.
     */
    public Male createMale(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MALE, DefaultMale.class);
    }

    /**
     * Gets an instance of type Male with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Male getMale(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MALE, DefaultMale.class);
    }

    /**
     * Gets all instances of Male from the ontology.
     */
    public Collection<? extends Male> getAllMaleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MALE, DefaultMale.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/moral_dilemma
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/moral_dilemma", Moral_dilemma.class, DefaultMoral_dilemma.class);
    }

    /**
     * Creates an instance of type Moral_dilemma.  Modifies the underlying ontology.
     */
    public Moral_dilemma createMoral_dilemma(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MORAL_DILEMMA, DefaultMoral_dilemma.class);
    }

    /**
     * Gets an instance of type Moral_dilemma with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Moral_dilemma getMoral_dilemma(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MORAL_DILEMMA, DefaultMoral_dilemma.class);
    }

    /**
     * Gets all instances of Moral_dilemma from the ontology.
     */
    public Collection<? extends Moral_dilemma> getAllMoral_dilemmaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MORAL_DILEMMA, DefaultMoral_dilemma.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/morning
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/morning", Morning.class, DefaultMorning.class);
    }

    /**
     * Creates an instance of type Morning.  Modifies the underlying ontology.
     */
    public Morning createMorning(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MORNING, DefaultMorning.class);
    }

    /**
     * Gets an instance of type Morning with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Morning getMorning(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MORNING, DefaultMorning.class);
    }

    /**
     * Gets all instances of Morning from the ontology.
     */
    public Collection<? extends Morning> getAllMorningInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MORNING, DefaultMorning.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/motorbike
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/motorbike", Motorbike.class, DefaultMotorbike.class);
    }

    /**
     * Creates an instance of type Motorbike.  Modifies the underlying ontology.
     */
    public Motorbike createMotorbike(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOTORBIKE, DefaultMotorbike.class);
    }

    /**
     * Gets an instance of type Motorbike with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Motorbike getMotorbike(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOTORBIKE, DefaultMotorbike.class);
    }

    /**
     * Gets all instances of Motorbike from the ontology.
     */
    public Collection<? extends Motorbike> getAllMotorbikeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOTORBIKE, DefaultMotorbike.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/move_forward
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/move_forward", Move_forward.class, DefaultMove_forward.class);
    }

    /**
     * Creates an instance of type Move_forward.  Modifies the underlying ontology.
     */
    public Move_forward createMove_forward(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOVE_FORWARD, DefaultMove_forward.class);
    }

    /**
     * Gets an instance of type Move_forward with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Move_forward getMove_forward(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOVE_FORWARD, DefaultMove_forward.class);
    }

    /**
     * Gets all instances of Move_forward from the ontology.
     */
    public Collection<? extends Move_forward> getAllMove_forwardInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOVE_FORWARD, DefaultMove_forward.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/night
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/night", Night.class, DefaultNight.class);
    }

    /**
     * Creates an instance of type Night.  Modifies the underlying ontology.
     */
    public Night createNight(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NIGHT, DefaultNight.class);
    }

    /**
     * Gets an instance of type Night with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Night getNight(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NIGHT, DefaultNight.class);
    }

    /**
     * Gets all instances of Night from the ontology.
     */
    public Collection<? extends Night> getAllNightInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NIGHT, DefaultNight.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/no_lights
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/no_lights", No_lights.class, DefaultNo_lights.class);
    }

    /**
     * Creates an instance of type No_lights.  Modifies the underlying ontology.
     */
    public No_lights createNo_lights(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NO_LIGHTS, DefaultNo_lights.class);
    }

    /**
     * Gets an instance of type No_lights with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public No_lights getNo_lights(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NO_LIGHTS, DefaultNo_lights.class);
    }

    /**
     * Gets all instances of No_lights from the ontology.
     */
    public Collection<? extends No_lights> getAllNo_lightsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NO_LIGHTS, DefaultNo_lights.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/noise_barrier
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/noise_barrier", Noise_barrier.class, DefaultNoise_barrier.class);
    }

    /**
     * Creates an instance of type Noise_barrier.  Modifies the underlying ontology.
     */
    public Noise_barrier createNoise_barrier(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NOISE_BARRIER, DefaultNoise_barrier.class);
    }

    /**
     * Gets an instance of type Noise_barrier with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Noise_barrier getNoise_barrier(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NOISE_BARRIER, DefaultNoise_barrier.class);
    }

    /**
     * Gets all instances of Noise_barrier from the ontology.
     */
    public Collection<? extends Noise_barrier> getAllNoise_barrierInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NOISE_BARRIER, DefaultNoise_barrier.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/non_living_entity
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/non_living_entity", Non_living_entity.class, DefaultNon_living_entity.class);
    }

    /**
     * Creates an instance of type Non_living_entity.  Modifies the underlying ontology.
     */
    public Non_living_entity createNon_living_entity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NON_LIVING_ENTITY, DefaultNon_living_entity.class);
    }

    /**
     * Gets an instance of type Non_living_entity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Non_living_entity getNon_living_entity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NON_LIVING_ENTITY, DefaultNon_living_entity.class);
    }

    /**
     * Gets all instances of Non_living_entity from the ontology.
     */
    public Collection<? extends Non_living_entity> getAllNon_living_entityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NON_LIVING_ENTITY, DefaultNon_living_entity.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/on_the_left
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/on_the_left", On_the_left.class, DefaultOn_the_left.class);
    }

    /**
     * Creates an instance of type On_the_left.  Modifies the underlying ontology.
     */
    public On_the_left createOn_the_left(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ON_THE_LEFT, DefaultOn_the_left.class);
    }

    /**
     * Gets an instance of type On_the_left with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public On_the_left getOn_the_left(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ON_THE_LEFT, DefaultOn_the_left.class);
    }

    /**
     * Gets all instances of On_the_left from the ontology.
     */
    public Collection<? extends On_the_left> getAllOn_the_leftInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ON_THE_LEFT, DefaultOn_the_left.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/on_the_right
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/on_the_right", On_the_right.class, DefaultOn_the_right.class);
    }

    /**
     * Creates an instance of type On_the_right.  Modifies the underlying ontology.
     */
    public On_the_right createOn_the_right(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ON_THE_RIGHT, DefaultOn_the_right.class);
    }

    /**
     * Gets an instance of type On_the_right with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public On_the_right getOn_the_right(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ON_THE_RIGHT, DefaultOn_the_right.class);
    }

    /**
     * Gets all instances of On_the_right from the ontology.
     */
    public Collection<? extends On_the_right> getAllOn_the_rightInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ON_THE_RIGHT, DefaultOn_the_right.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/one_way_road
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/one_way_road", One_way_road.class, DefaultOne_way_road.class);
    }

    /**
     * Creates an instance of type One_way_road.  Modifies the underlying ontology.
     */
    public One_way_road createOne_way_road(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ONE_WAY_ROAD, DefaultOne_way_road.class);
    }

    /**
     * Gets an instance of type One_way_road with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public One_way_road getOne_way_road(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ONE_WAY_ROAD, DefaultOne_way_road.class);
    }

    /**
     * Gets all instances of One_way_road from the ontology.
     */
    public Collection<? extends One_way_road> getAllOne_way_roadInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ONE_WAY_ROAD, DefaultOne_way_road.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/other
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/other", Other.class, DefaultOther.class);
    }

    /**
     * Creates an instance of type Other.  Modifies the underlying ontology.
     */
    public Other createOther(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OTHER, DefaultOther.class);
    }

    /**
     * Gets an instance of type Other with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Other getOther(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OTHER, DefaultOther.class);
    }

    /**
     * Gets all instances of Other from the ontology.
     */
    public Collection<? extends Other> getAllOtherInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OTHER, DefaultOther.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/other_driver_action
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/other_driver_action", Other_driver_action.class, DefaultOther_driver_action.class);
    }

    /**
     * Creates an instance of type Other_driver_action.  Modifies the underlying ontology.
     */
    public Other_driver_action createOther_driver_action(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OTHER_DRIVER_ACTION, DefaultOther_driver_action.class);
    }

    /**
     * Gets an instance of type Other_driver_action with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Other_driver_action getOther_driver_action(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OTHER_DRIVER_ACTION, DefaultOther_driver_action.class);
    }

    /**
     * Gets all instances of Other_driver_action from the ontology.
     */
    public Collection<? extends Other_driver_action> getAllOther_driver_actionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OTHER_DRIVER_ACTION, DefaultOther_driver_action.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/out_of_vehicle
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/out_of_vehicle", Out_of_vehicle.class, DefaultOut_of_vehicle.class);
    }

    /**
     * Creates an instance of type Out_of_vehicle.  Modifies the underlying ontology.
     */
    public Out_of_vehicle createOut_of_vehicle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OUT_OF_VEHICLE, DefaultOut_of_vehicle.class);
    }

    /**
     * Gets an instance of type Out_of_vehicle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Out_of_vehicle getOut_of_vehicle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OUT_OF_VEHICLE, DefaultOut_of_vehicle.class);
    }

    /**
     * Gets all instances of Out_of_vehicle from the ontology.
     */
    public Collection<? extends Out_of_vehicle> getAllOut_of_vehicleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OUT_OF_VEHICLE, DefaultOut_of_vehicle.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/overtake
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/overtake", Overtake.class, DefaultOvertake.class);
    }

    /**
     * Creates an instance of type Overtake.  Modifies the underlying ontology.
     */
    public Overtake createOvertake(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OVERTAKE, DefaultOvertake.class);
    }

    /**
     * Gets an instance of type Overtake with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Overtake getOvertake(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OVERTAKE, DefaultOvertake.class);
    }

    /**
     * Gets all instances of Overtake from the ontology.
     */
    public Collection<? extends Overtake> getAllOvertakeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OVERTAKE, DefaultOvertake.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/overtaking
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/overtaking", Overtaking.class, DefaultOvertaking.class);
    }

    /**
     * Creates an instance of type Overtaking.  Modifies the underlying ontology.
     */
    public Overtaking createOvertaking(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OVERTAKING, DefaultOvertaking.class);
    }

    /**
     * Gets an instance of type Overtaking with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Overtaking getOvertaking(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OVERTAKING, DefaultOvertaking.class);
    }

    /**
     * Gets all instances of Overtaking from the ontology.
     */
    public Collection<? extends Overtaking> getAllOvertakingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OVERTAKING, DefaultOvertaking.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/passenger
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/passenger", Passenger.class, DefaultPassenger.class);
    }

    /**
     * Creates an instance of type Passenger.  Modifies the underlying ontology.
     */
    public Passenger createPassenger(String name) {
        return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PASSENGER, DefaultPassenger.class);
    }

    public Passenger createPassengerSubclass(String name) {
        return delegate.createSubclassWrappedIndividual(name, Vocabulary.CLASS_PASSENGER, DefaultPassenger.class);
    }

    /**
     * Gets an instance of type Passenger with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Passenger getPassenger(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PASSENGER, DefaultPassenger.class);
    }

    /**
     * Gets all instances of Passenger from the ontology.
     */
    public Collection<? extends Passenger> getAllPassengerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PASSENGER, DefaultPassenger.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/passenger_car
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/passenger_car", Passenger_car.class, DefaultPassenger_car.class);
    }

    /**
     * Creates an instance of type Passenger_car.  Modifies the underlying ontology.
     */
    public Passenger_car createPassenger_car(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PASSENGER_CAR, DefaultPassenger_car.class);
    }

    /**
     * Gets an instance of type Passenger_car with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Passenger_car getPassenger_car(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PASSENGER_CAR, DefaultPassenger_car.class);
    }

    /**
     * Gets all instances of Passenger_car from the ontology.
     */
    public Collection<? extends Passenger_car> getAllPassenger_carInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PASSENGER_CAR, DefaultPassenger_car.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/pavement
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/pavement", Pavement.class, DefaultPavement.class);
    }

    /**
     * Creates an instance of type Pavement.  Modifies the underlying ontology.
     */
    public Pavement createPavement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PAVEMENT, DefaultPavement.class);
    }

    /**
     * Gets an instance of type Pavement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pavement getPavement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PAVEMENT, DefaultPavement.class);
    }

    /**
     * Gets all instances of Pavement from the ontology.
     */
    public Collection<? extends Pavement> getAllPavementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PAVEMENT, DefaultPavement.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/pecuniary_penalty
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/pecuniary_penalty", Pecuniary_penalty.class, DefaultPecuniary_penalty.class);
    }

    /**
     * Creates an instance of type Pecuniary_penalty.  Modifies the underlying ontology.
     */
    public Pecuniary_penalty createPecuniary_penalty(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PECUNIARY_PENALTY, DefaultPecuniary_penalty.class);
    }

    /**
     * Gets an instance of type Pecuniary_penalty with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pecuniary_penalty getPecuniary_penalty(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PECUNIARY_PENALTY, DefaultPecuniary_penalty.class);
    }

    /**
     * Gets all instances of Pecuniary_penalty from the ontology.
     */
    public Collection<? extends Pecuniary_penalty> getAllPecuniary_penaltyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PECUNIARY_PENALTY, DefaultPecuniary_penalty.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/pedestrian
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/pedestrian", Pedestrian.class, DefaultPedestrian.class);
    }

    /**
     * Creates an instance of type Pedestrian.  Modifies the underlying ontology.
     */
    public Pedestrian createPedestrian(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PEDESTRIAN, DefaultPedestrian.class);
    }

    public Pedestrian createPedestrianSubclass(String name) {
        return delegate.createSubclassWrappedIndividual(name, Vocabulary.CLASS_PEDESTRIAN, DefaultPedestrian.class);
    }

    /**
     * Gets an instance of type Pedestrian with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pedestrian getPedestrian(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PEDESTRIAN, DefaultPedestrian.class);
    }

    /**
     * Gets all instances of Pedestrian from the ontology.
     */
    public Collection<? extends Pedestrian> getAllPedestrianInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PEDESTRIAN, DefaultPedestrian.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/pedestrian_action
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/pedestrian_action", Pedestrian_action.class, DefaultPedestrian_action.class);
    }

    /**
     * Creates an instance of type Pedestrian_action.  Modifies the underlying ontology.
     */
    public Pedestrian_action createPedestrian_action(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PEDESTRIAN_ACTION, DefaultPedestrian_action.class);
    }

    /**
     * Gets an instance of type Pedestrian_action with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pedestrian_action getPedestrian_action(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PEDESTRIAN_ACTION, DefaultPedestrian_action.class);
    }

    /**
     * Gets all instances of Pedestrian_action from the ontology.
     */
    public Collection<? extends Pedestrian_action> getAllPedestrian_actionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PEDESTRIAN_ACTION, DefaultPedestrian_action.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/pedestrian_crossing
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/pedestrian_crossing", Pedestrian_crossing.class, DefaultPedestrian_crossing.class);
    }

    /**
     * Creates an instance of type Pedestrian_crossing.  Modifies the underlying ontology.
     */
    public Pedestrian_crossing createPedestrian_crossing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PEDESTRIAN_CROSSING, DefaultPedestrian_crossing.class);
    }

    /**
     * Gets an instance of type Pedestrian_crossing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pedestrian_crossing getPedestrian_crossing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PEDESTRIAN_CROSSING, DefaultPedestrian_crossing.class);
    }

    /**
     * Gets all instances of Pedestrian_crossing from the ontology.
     */
    public Collection<? extends Pedestrian_crossing> getAllPedestrian_crossingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PEDESTRIAN_CROSSING, DefaultPedestrian_crossing.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/pedestrian_crossing_trash
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/pedestrian_crossing_trash", Pedestrian_crossing_trash.class, DefaultPedestrian_crossing_trash.class);
    }

    /**
     * Creates an instance of type Pedestrian_crossing_trash.  Modifies the underlying ontology.
     */
    public Pedestrian_crossing_trash createPedestrian_crossing_trash(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PEDESTRIAN_CROSSING_TRASH, DefaultPedestrian_crossing_trash.class);
    }

    /**
     * Gets an instance of type Pedestrian_crossing_trash with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pedestrian_crossing_trash getPedestrian_crossing_trash(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PEDESTRIAN_CROSSING_TRASH, DefaultPedestrian_crossing_trash.class);
    }

    /**
     * Gets all instances of Pedestrian_crossing_trash from the ontology.
     */
    public Collection<? extends Pedestrian_crossing_trash> getAllPedestrian_crossing_trashInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PEDESTRIAN_CROSSING_TRASH, DefaultPedestrian_crossing_trash.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/pet
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/pet", Pet.class, DefaultPet.class);
    }

    /**
     * Creates an instance of type Pet.  Modifies the underlying ontology.
     */
    public Pet createPet(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PET, DefaultPet.class);
    }

    /**
     * Gets an instance of type Pet with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pet getPet(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PET, DefaultPet.class);
    }

    /**
     * Gets all instances of Pet from the ontology.
     */
    public Collection<? extends Pet> getAllPetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PET, DefaultPet.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/police_car
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/police_car", Police_car.class, DefaultPolice_car.class);
    }

    /**
     * Creates an instance of type Police_car.  Modifies the underlying ontology.
     */
    public Police_car createPolice_car(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_POLICE_CAR, DefaultPolice_car.class);
    }

    /**
     * Gets an instance of type Police_car with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Police_car getPolice_car(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_POLICE_CAR, DefaultPolice_car.class);
    }

    /**
     * Gets all instances of Police_car from the ontology.
     */
    public Collection<? extends Police_car> getAllPolice_carInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_POLICE_CAR, DefaultPolice_car.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/police_on_traffic_duty
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/police_on_traffic_duty", Police_on_traffic_duty.class, DefaultPolice_on_traffic_duty.class);
    }

    /**
     * Creates an instance of type Police_on_traffic_duty.  Modifies the underlying ontology.
     */
    public Police_on_traffic_duty createPolice_on_traffic_duty(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_POLICE_ON_TRAFFIC_DUTY, DefaultPolice_on_traffic_duty.class);
    }

    /**
     * Gets an instance of type Police_on_traffic_duty with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Police_on_traffic_duty getPolice_on_traffic_duty(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_POLICE_ON_TRAFFIC_DUTY, DefaultPolice_on_traffic_duty.class);
    }

    /**
     * Gets all instances of Police_on_traffic_duty from the ontology.
     */
    public Collection<? extends Police_on_traffic_duty> getAllPolice_on_traffic_dutyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_POLICE_ON_TRAFFIC_DUTY, DefaultPolice_on_traffic_duty.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/preposition
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/preposition", Preposition.class, DefaultPreposition.class);
    }

    /**
     * Creates an instance of type Preposition.  Modifies the underlying ontology.
     */
    public Preposition createPreposition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PREPOSITION, DefaultPreposition.class);
    }

    /**
     * Gets an instance of type Preposition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Preposition getPreposition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PREPOSITION, DefaultPreposition.class);
    }

    /**
     * Gets all instances of Preposition from the ontology.
     */
    public Collection<? extends Preposition> getAllPrepositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PREPOSITION, DefaultPreposition.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/priority_right
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/priority_right", Priority_right.class, DefaultPriority_right.class);
    }

    /**
     * Creates an instance of type Priority_right.  Modifies the underlying ontology.
     */
    public Priority_right createPriority_right(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRIORITY_RIGHT, DefaultPriority_right.class);
    }

    /**
     * Gets an instance of type Priority_right with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Priority_right getPriority_right(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRIORITY_RIGHT, DefaultPriority_right.class);
    }

    /**
     * Gets all instances of Priority_right from the ontology.
     */
    public Collection<? extends Priority_right> getAllPriority_rightInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRIORITY_RIGHT, DefaultPriority_right.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/private_road
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/private_road", Private_road.class, DefaultPrivate_road.class);
    }

    /**
     * Creates an instance of type Private_road.  Modifies the underlying ontology.
     */
    public Private_road createPrivate_road(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRIVATE_ROAD, DefaultPrivate_road.class);
    }

    /**
     * Gets an instance of type Private_road with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Private_road getPrivate_road(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRIVATE_ROAD, DefaultPrivate_road.class);
    }

    /**
     * Gets all instances of Private_road from the ontology.
     */
    public Collection<? extends Private_road> getAllPrivate_roadInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRIVATE_ROAD, DefaultPrivate_road.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/probation
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/probation", Probation.class, DefaultProbation.class);
    }

    /**
     * Creates an instance of type Probation.  Modifies the underlying ontology.
     */
    public Probation createProbation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROBATION, DefaultProbation.class);
    }

    /**
     * Gets an instance of type Probation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Probation getProbation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROBATION, DefaultProbation.class);
    }

    /**
     * Gets all instances of Probation from the ontology.
     */
    public Collection<? extends Probation> getAllProbationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROBATION, DefaultProbation.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/provincial_road
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/provincial_road", Provincial_road.class, DefaultProvincial_road.class);
    }

    /**
     * Creates an instance of type Provincial_road.  Modifies the underlying ontology.
     */
    public Provincial_road createProvincial_road(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROVINCIAL_ROAD, DefaultProvincial_road.class);
    }

    /**
     * Gets an instance of type Provincial_road with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Provincial_road getProvincial_road(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROVINCIAL_ROAD, DefaultProvincial_road.class);
    }

    /**
     * Gets all instances of Provincial_road from the ontology.
     */
    public Collection<? extends Provincial_road> getAllProvincial_roadInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROVINCIAL_ROAD, DefaultProvincial_road.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/railway
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/railway", Railway.class, DefaultRailway.class);
    }

    /**
     * Creates an instance of type Railway.  Modifies the underlying ontology.
     */
    public Railway createRailway(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RAILWAY, DefaultRailway.class);
    }

    /**
     * Gets an instance of type Railway with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Railway getRailway(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RAILWAY, DefaultRailway.class);
    }

    /**
     * Gets all instances of Railway from the ontology.
     */
    public Collection<? extends Railway> getAllRailwayInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RAILWAY, DefaultRailway.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/railway_crossing
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/railway_crossing", Railway_crossing.class, DefaultRailway_crossing.class);
    }

    /**
     * Creates an instance of type Railway_crossing.  Modifies the underlying ontology.
     */
    public Railway_crossing createRailway_crossing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RAILWAY_CROSSING, DefaultRailway_crossing.class);
    }

    /**
     * Gets an instance of type Railway_crossing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Railway_crossing getRailway_crossing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RAILWAY_CROSSING, DefaultRailway_crossing.class);
    }

    /**
     * Gets all instances of Railway_crossing from the ontology.
     */
    public Collection<? extends Railway_crossing> getAllRailway_crossingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RAILWAY_CROSSING, DefaultRailway_crossing.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/red
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/red", Red.class, DefaultRed.class);
    }

    /**
     * Creates an instance of type Red.  Modifies the underlying ontology.
     */
    public Red createRed(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RED, DefaultRed.class);
    }

    /**
     * Gets an instance of type Red with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Red getRed(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RED, DefaultRed.class);
    }

    /**
     * Gets all instances of Red from the ontology.
     */
    public Collection<? extends Red> getAllRedInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RED, DefaultRed.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/restriction_of_liberty
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/restriction_of_liberty", Restriction_of_liberty.class, DefaultRestriction_of_liberty.class);
    }

    /**
     * Creates an instance of type Restriction_of_liberty.  Modifies the underlying ontology.
     */
    public Restriction_of_liberty createRestriction_of_liberty(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RESTRICTION_OF_LIBERTY, DefaultRestriction_of_liberty.class);
    }

    /**
     * Gets an instance of type Restriction_of_liberty with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Restriction_of_liberty getRestriction_of_liberty(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RESTRICTION_OF_LIBERTY, DefaultRestriction_of_liberty.class);
    }

    /**
     * Gets all instances of Restriction_of_liberty from the ontology.
     */
    public Collection<? extends Restriction_of_liberty> getAllRestriction_of_libertyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RESTRICTION_OF_LIBERTY, DefaultRestriction_of_liberty.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/rickshaw
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/rickshaw", Rickshaw.class, DefaultRickshaw.class);
    }

    /**
     * Creates an instance of type Rickshaw.  Modifies the underlying ontology.
     */
    public Rickshaw createRickshaw(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RICKSHAW, DefaultRickshaw.class);
    }

    /**
     * Gets an instance of type Rickshaw with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Rickshaw getRickshaw(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RICKSHAW, DefaultRickshaw.class);
    }

    /**
     * Gets all instances of Rickshaw from the ontology.
     */
    public Collection<? extends Rickshaw> getAllRickshawInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RICKSHAW, DefaultRickshaw.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/right_hand_traffic
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/right_hand_traffic", Right_hand_traffic.class, DefaultRight_hand_traffic.class);
    }

    /**
     * Creates an instance of type Right_hand_traffic.  Modifies the underlying ontology.
     */
    public Right_hand_traffic createRight_hand_traffic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RIGHT_HAND_TRAFFIC, DefaultRight_hand_traffic.class);
    }

    /**
     * Gets an instance of type Right_hand_traffic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Right_hand_traffic getRight_hand_traffic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RIGHT_HAND_TRAFFIC, DefaultRight_hand_traffic.class);
    }

    /**
     * Gets all instances of Right_hand_traffic from the ontology.
     */
    public Collection<? extends Right_hand_traffic> getAllRight_hand_trafficInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RIGHT_HAND_TRAFFIC, DefaultRight_hand_traffic.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/road_segment
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/road_segment", Road_segment.class, DefaultRoad_segment.class);
    }

    /**
     * Creates an instance of type Road_segment.  Modifies the underlying ontology.
     */
    public Road_segment createRoad_segment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROAD_SEGMENT, DefaultRoad_segment.class);
    }

    /**
     * Gets an instance of type Road_segment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Road_segment getRoad_segment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROAD_SEGMENT, DefaultRoad_segment.class);
    }

    /**
     * Gets all instances of Road_segment from the ontology.
     */
    public Collection<? extends Road_segment> getAllRoad_segmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROAD_SEGMENT, DefaultRoad_segment.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/road_sign_post
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/road_sign_post", Road_sign_post.class, DefaultRoad_sign_post.class);
    }

    /**
     * Creates an instance of type Road_sign_post.  Modifies the underlying ontology.
     */
    public Road_sign_post createRoad_sign_post(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROAD_SIGN_POST, DefaultRoad_sign_post.class);
    }

    /**
     * Gets an instance of type Road_sign_post with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Road_sign_post getRoad_sign_post(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROAD_SIGN_POST, DefaultRoad_sign_post.class);
    }

    /**
     * Gets all instances of Road_sign_post from the ontology.
     */
    public Collection<? extends Road_sign_post> getAllRoad_sign_postInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROAD_SIGN_POST, DefaultRoad_sign_post.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/road_type
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/road_type", Road_type.class, DefaultRoad_type.class);
    }

    /**
     * Creates an instance of type Road_type.  Modifies the underlying ontology.
     */
    public Road_type createRoad_type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROAD_TYPE, DefaultRoad_type.class);
    }

    public Road_type createRoad_typeSubclass(String name) {
        return delegate.createSubclassWrappedIndividual(name, Vocabulary.CLASS_ROAD_TYPE, DefaultRoad_type.class);
    }

    /**
     * Gets an instance of type Road_type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Road_type getRoad_type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROAD_TYPE, DefaultRoad_type.class);
    }

    /**
     * Gets all instances of Road_type from the ontology.
     */
    public Collection<? extends Road_type> getAllRoad_typeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROAD_TYPE, DefaultRoad_type.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/robbery
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/robbery", Robbery.class, DefaultRobbery.class);
    }

    /**
     * Creates an instance of type Robbery.  Modifies the underlying ontology.
     */
    public Robbery createRobbery(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROBBERY, DefaultRobbery.class);
    }

    /**
     * Gets an instance of type Robbery with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Robbery getRobbery(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROBBERY, DefaultRobbery.class);
    }

    /**
     * Gets all instances of Robbery from the ontology.
     */
    public Collection<? extends Robbery> getAllRobberyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROBBERY, DefaultRobbery.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/rock
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/rock", Rock.class, DefaultRock.class);
    }

    /**
     * Creates an instance of type Rock.  Modifies the underlying ontology.
     */
    public Rock createRock(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROCK, DefaultRock.class);
    }

    /**
     * Gets an instance of type Rock with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Rock getRock(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROCK, DefaultRock.class);
    }

    /**
     * Gets all instances of Rock from the ontology.
     */
    public Collection<? extends Rock> getAllRockInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROCK, DefaultRock.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/roundabout
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/roundabout", Roundabout.class, DefaultRoundabout.class);
    }

    /**
     * Creates an instance of type Roundabout.  Modifies the underlying ontology.
     */
    public Roundabout createRoundabout(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROUNDABOUT, DefaultRoundabout.class);
    }

    /**
     * Gets an instance of type Roundabout with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Roundabout getRoundabout(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROUNDABOUT, DefaultRoundabout.class);
    }

    /**
     * Gets all instances of Roundabout from the ontology.
     */
    public Collection<? extends Roundabout> getAllRoundaboutInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROUNDABOUT, DefaultRoundabout.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/run
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/run", Run.class, DefaultRun.class);
    }

    /**
     * Creates an instance of type Run.  Modifies the underlying ontology.
     */
    public Run createRun(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RUN, DefaultRun.class);
    }

    /**
     * Gets an instance of type Run with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Run getRun(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RUN, DefaultRun.class);
    }

    /**
     * Gets all instances of Run from the ontology.
     */
    public Collection<? extends Run> getAllRunInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RUN, DefaultRun.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/scenario
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/scenario", Scenario.class, DefaultScenario.class);
    }

    /**
     * Creates an instance of type Scenario.  Modifies the underlying ontology.
     */
    public Scenario createScenario(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCENARIO, DefaultScenario.class);
    }

    /**
     * Gets an instance of type Scenario with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Scenario getScenario(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCENARIO, DefaultScenario.class);
    }

    /**
     * Gets all instances of Scenario from the ontology.
     */
    public Collection<? extends Scenario> getAllScenarioInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCENARIO, DefaultScenario.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/scooter
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/scooter", Scooter.class, DefaultScooter.class);
    }

    /**
     * Creates an instance of type Scooter.  Modifies the underlying ontology.
     */
    public Scooter createScooter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCOOTER, DefaultScooter.class);
    }

    /**
     * Gets an instance of type Scooter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Scooter getScooter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCOOTER, DefaultScooter.class);
    }

    /**
     * Gets all instances of Scooter from the ontology.
     */
    public Collection<? extends Scooter> getAllScooterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCOOTER, DefaultScooter.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/security_side_barrier
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/security_side_barrier", Security_side_barrier.class, DefaultSecurity_side_barrier.class);
    }

    /**
     * Creates an instance of type Security_side_barrier.  Modifies the underlying ontology.
     */
    public Security_side_barrier createSecurity_side_barrier(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SECURITY_SIDE_BARRIER, DefaultSecurity_side_barrier.class);
    }

    /**
     * Gets an instance of type Security_side_barrier with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Security_side_barrier getSecurity_side_barrier(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SECURITY_SIDE_BARRIER, DefaultSecurity_side_barrier.class);
    }

    /**
     * Gets all instances of Security_side_barrier from the ontology.
     */
    public Collection<? extends Security_side_barrier> getAllSecurity_side_barrierInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SECURITY_SIDE_BARRIER, DefaultSecurity_side_barrier.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/segment_under_construction
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/segment_under_construction", Segment_under_construction.class, DefaultSegment_under_construction.class);
    }

    /**
     * Creates an instance of type Segment_under_construction.  Modifies the underlying ontology.
     */
    public Segment_under_construction createSegment_under_construction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SEGMENT_UNDER_CONSTRUCTION, DefaultSegment_under_construction.class);
    }

    /**
     * Gets an instance of type Segment_under_construction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Segment_under_construction getSegment_under_construction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SEGMENT_UNDER_CONSTRUCTION, DefaultSegment_under_construction.class);
    }

    /**
     * Gets all instances of Segment_under_construction from the ontology.
     */
    public Collection<? extends Segment_under_construction> getAllSegment_under_constructionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SEGMENT_UNDER_CONSTRUCTION, DefaultSegment_under_construction.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/segway
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/segway", Segway.class, DefaultSegway.class);
    }

    /**
     * Creates an instance of type Segway.  Modifies the underlying ontology.
     */
    public Segway createSegway(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SEGWAY, DefaultSegway.class);
    }

    /**
     * Gets an instance of type Segway with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Segway getSegway(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SEGWAY, DefaultSegway.class);
    }

    /**
     * Gets all instances of Segway from the ontology.
     */
    public Collection<? extends Segway> getAllSegwayInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SEGWAY, DefaultSegway.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/sexualoffences
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/sexualoffences", Sexual_offences.class, DefaultSexual_offences.class);
    }

    /**
     * Creates an instance of type Sexual_offences.  Modifies the underlying ontology.
     */
    public Sexual_offences createSexual_offences(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SEXUAL_OFFENCES, DefaultSexual_offences.class);
    }

    /**
     * Gets an instance of type Sexual_offences with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sexual_offences getSexual_offences(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SEXUAL_OFFENCES, DefaultSexual_offences.class);
    }

    /**
     * Gets all instances of Sexual_offences from the ontology.
     */
    public Collection<? extends Sexual_offences> getAllSexual_offencesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SEXUAL_OFFENCES, DefaultSexual_offences.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/shower
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/shower", Shower.class, DefaultShower.class);
    }

    /**
     * Creates an instance of type Shower.  Modifies the underlying ontology.
     */
    public Shower createShower(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SHOWER, DefaultShower.class);
    }

    /**
     * Gets an instance of type Shower with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Shower getShower(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SHOWER, DefaultShower.class);
    }

    /**
     * Gets all instances of Shower from the ontology.
     */
    public Collection<? extends Shower> getAllShowerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SHOWER, DefaultShower.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/skateboard
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/skateboard", Skateboard.class, DefaultSkateboard.class);
    }

    /**
     * Creates an instance of type Skateboard.  Modifies the underlying ontology.
     */
    public Skateboard createSkateboard(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SKATEBOARD, DefaultSkateboard.class);
    }

    /**
     * Gets an instance of type Skateboard with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Skateboard getSkateboard(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SKATEBOARD, DefaultSkateboard.class);
    }

    /**
     * Gets all instances of Skateboard from the ontology.
     */
    public Collection<? extends Skateboard> getAllSkateboardInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SKATEBOARD, DefaultSkateboard.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/slow_down
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/slow_down", Slow_down.class, DefaultSlow_down.class);
    }

    /**
     * Creates an instance of type Slow_down.  Modifies the underlying ontology.
     */
    public Slow_down createSlow_down(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SLOW_DOWN, DefaultSlow_down.class);
    }

    /**
     * Gets an instance of type Slow_down with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Slow_down getSlow_down(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SLOW_DOWN, DefaultSlow_down.class);
    }

    /**
     * Gets all instances of Slow_down from the ontology.
     */
    public Collection<? extends Slow_down> getAllSlow_downInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SLOW_DOWN, DefaultSlow_down.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/snow
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/snow", Snow.class, DefaultSnow.class);
    }

    /**
     * Creates an instance of type Snow.  Modifies the underlying ontology.
     */
    public Snow createSnow(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SNOW, DefaultSnow.class);
    }

    /**
     * Gets an instance of type Snow with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Snow getSnow(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SNOW, DefaultSnow.class);
    }

    /**
     * Gets all instances of Snow from the ontology.
     */
    public Collection<? extends Snow> getAllSnowInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SNOW, DefaultSnow.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/speed_bump
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/speed_bump", Speed_bump.class, DefaultSpeed_bump.class);
    }

    /**
     * Creates an instance of type Speed_bump.  Modifies the underlying ontology.
     */
    public Speed_bump createSpeed_bump(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPEED_BUMP, DefaultSpeed_bump.class);
    }

    /**
     * Gets an instance of type Speed_bump with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Speed_bump getSpeed_bump(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPEED_BUMP, DefaultSpeed_bump.class);
    }

    /**
     * Gets all instances of Speed_bump from the ontology.
     */
    public Collection<? extends Speed_bump> getAllSpeed_bumpInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPEED_BUMP, DefaultSpeed_bump.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/speed_limit
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/speed_limit", Speed_limit.class, DefaultSpeed_limit.class);
    }

    /**
     * Creates an instance of type Speed_limit.  Modifies the underlying ontology.
     */
    public Speed_limit createSpeed_limit(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPEED_LIMIT, DefaultSpeed_limit.class);
    }

    /**
     * Gets an instance of type Speed_limit with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Speed_limit getSpeed_limit(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPEED_LIMIT, DefaultSpeed_limit.class);
    }

    /**
     * Gets all instances of Speed_limit from the ontology.
     */
    public Collection<? extends Speed_limit> getAllSpeed_limitInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPEED_LIMIT, DefaultSpeed_limit.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/state_change
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/state_change", State_change.class, DefaultState_change.class);
    }

    /**
     * Creates an instance of type State_change.  Modifies the underlying ontology.
     */
    public State_change createState_change(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STATE_CHANGE, DefaultState_change.class);
    }

    /**
     * Gets an instance of type State_change with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public State_change getState_change(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STATE_CHANGE, DefaultState_change.class);
    }

    /**
     * Gets all instances of State_change from the ontology.
     */
    public Collection<? extends State_change> getAllState_changeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STATE_CHANGE, DefaultState_change.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/state_road
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/state_road", State_road.class, DefaultState_road.class);
    }

    /**
     * Creates an instance of type State_road.  Modifies the underlying ontology.
     */
    public State_road createState_road(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STATE_ROAD, DefaultState_road.class);
    }

    /**
     * Gets an instance of type State_road with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public State_road getState_road(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STATE_ROAD, DefaultState_road.class);
    }

    /**
     * Gets all instances of State_road from the ontology.
     */
    public Collection<? extends State_road> getAllState_roadInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STATE_ROAD, DefaultState_road.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/stock
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/stock", Stock.class, DefaultStock.class);
    }

    /**
     * Creates an instance of type Stock.  Modifies the underlying ontology.
     */
    public Stock createStock(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STOCK, DefaultStock.class);
    }

    /**
     * Gets an instance of type Stock with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Stock getStock(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STOCK, DefaultStock.class);
    }

    /**
     * Gets all instances of Stock from the ontology.
     */
    public Collection<? extends Stock> getAllStockInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STOCK, DefaultStock.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/stop
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/stop", Stop.class, DefaultStop.class);
    }

    /**
     * Creates an instance of type Stop.  Modifies the underlying ontology.
     */
    public Stop createStop(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STOP, DefaultStop.class);
    }

    /**
     * Gets an instance of type Stop with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Stop getStop(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STOP, DefaultStop.class);
    }

    /**
     * Gets all instances of Stop from the ontology.
     */
    public Collection<? extends Stop> getAllStopInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STOP, DefaultStop.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/straight_segment
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/straight_segment", Straight_segment.class, DefaultStraight_segment.class);
    }

    /**
     * Creates an instance of type Straight_segment.  Modifies the underlying ontology.
     */
    public Straight_segment createStraight_segment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STRAIGHT_SEGMENT, DefaultStraight_segment.class);
    }

    /**
     * Gets an instance of type Straight_segment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Straight_segment getStraight_segment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STRAIGHT_SEGMENT, DefaultStraight_segment.class);
    }

    /**
     * Gets all instances of Straight_segment from the ontology.
     */
    public Collection<? extends Straight_segment> getAllStraight_segmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STRAIGHT_SEGMENT, DefaultStraight_segment.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/street_crossing
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/street_crossing", Street_crossing.class, DefaultStreet_crossing.class);
    }

    /**
     * Creates an instance of type Street_crossing.  Modifies the underlying ontology.
     */
    public Street_crossing createStreet_crossing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STREET_CROSSING, DefaultStreet_crossing.class);
    }

    /**
     * Gets an instance of type Street_crossing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Street_crossing getStreet_crossing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STREET_CROSSING, DefaultStreet_crossing.class);
    }

    /**
     * Gets all instances of Street_crossing from the ontology.
     */
    public Collection<? extends Street_crossing> getAllStreet_crossingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STREET_CROSSING, DefaultStreet_crossing.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/street_lamp
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/street_lamp", Street_lamp.class, DefaultStreet_lamp.class);
    }

    /**
     * Creates an instance of type Street_lamp.  Modifies the underlying ontology.
     */
    public Street_lamp createStreet_lamp(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STREET_LAMP, DefaultStreet_lamp.class);
    }

    /**
     * Gets an instance of type Street_lamp with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Street_lamp getStreet_lamp(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STREET_LAMP, DefaultStreet_lamp.class);
    }

    /**
     * Gets all instances of Street_lamp from the ontology.
     */
    public Collection<? extends Street_lamp> getAllStreet_lampInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STREET_LAMP, DefaultStreet_lamp.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/street_tidy
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/street_tidy", Street_tidy.class, DefaultStreet_tidy.class);
    }

    /**
     * Creates an instance of type Street_tidy.  Modifies the underlying ontology.
     */
    public Street_tidy createStreet_tidy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STREET_TIDY, DefaultStreet_tidy.class);
    }

    /**
     * Gets an instance of type Street_tidy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Street_tidy getStreet_tidy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STREET_TIDY, DefaultStreet_tidy.class);
    }

    /**
     * Gets all instances of Street_tidy from the ontology.
     */
    public Collection<? extends Street_tidy> getAllStreet_tidyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STREET_TIDY, DefaultStreet_tidy.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/strong_wind
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/strong_wind", Strong_wind.class, DefaultStrong_wind.class);
    }

    /**
     * Creates an instance of type Strong_wind.  Modifies the underlying ontology.
     */
    public Strong_wind createStrong_wind(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STRONG_WIND, DefaultStrong_wind.class);
    }

    /**
     * Gets an instance of type Strong_wind with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Strong_wind getStrong_wind(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STRONG_WIND, DefaultStrong_wind.class);
    }

    /**
     * Gets all instances of Strong_wind from the ontology.
     */
    public Collection<? extends Strong_wind> getAllStrong_windInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STRONG_WIND, DefaultStrong_wind.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/sunny
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/sunny", Sunny.class, DefaultSunny.class);
    }

    /**
     * Creates an instance of type Sunny.  Modifies the underlying ontology.
     */
    public Sunny createSunny(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUNNY, DefaultSunny.class);
    }

    /**
     * Gets an instance of type Sunny with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sunny getSunny(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUNNY, DefaultSunny.class);
    }

    /**
     * Gets all instances of Sunny from the ontology.
     */
    public Collection<? extends Sunny> getAllSunnyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUNNY, DefaultSunny.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/sunrise
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/sunrise", Sunrise.class, DefaultSunrise.class);
    }

    /**
     * Creates an instance of type Sunrise.  Modifies the underlying ontology.
     */
    public Sunrise createSunrise(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUNRISE, DefaultSunrise.class);
    }

    /**
     * Gets an instance of type Sunrise with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sunrise getSunrise(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUNRISE, DefaultSunrise.class);
    }

    /**
     * Gets all instances of Sunrise from the ontology.
     */
    public Collection<? extends Sunrise> getAllSunriseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUNRISE, DefaultSunrise.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/sunset
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/sunset", Sunset.class, DefaultSunset.class);
    }

    /**
     * Creates an instance of type Sunset.  Modifies the underlying ontology.
     */
    public Sunset createSunset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUNSET, DefaultSunset.class);
    }

    /**
     * Gets an instance of type Sunset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sunset getSunset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUNSET, DefaultSunset.class);
    }

    /**
     * Gets all instances of Sunset from the ontology.
     */
    public Collection<? extends Sunset> getAllSunsetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUNSET, DefaultSunset.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/surrounding
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/surrounding", Surrounding.class, DefaultSurrounding.class);
    }

    /**
     * Creates an instance of type Surrounding.  Modifies the underlying ontology.
     */
    public Surrounding createSurrounding(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SURROUNDING, DefaultSurrounding.class);
    }

    public Surrounding createSurroundingSubclass(String name) {
        return delegate.createSubclassWrappedIndividual(name, Vocabulary.CLASS_SURROUNDING, DefaultSurrounding.class);
    }

    /**
     * Gets an instance of type Surrounding with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Surrounding getSurrounding(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SURROUNDING, DefaultSurrounding.class);
    }

    /**
     * Gets all instances of Surrounding from the ontology.
     */
    public Collection<? extends Surrounding> getAllSurroundingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SURROUNDING, DefaultSurrounding.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/suspended_sentence
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/suspended_sentence", Suspended_sentence.class, DefaultSuspended_sentence.class);
    }

    /**
     * Creates an instance of type Suspended_sentence.  Modifies the underlying ontology.
     */
    public Suspended_sentence createSuspended_sentence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUSPENDED_SENTENCE, DefaultSuspended_sentence.class);
    }

    /**
     * Gets an instance of type Suspended_sentence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Suspended_sentence getSuspended_sentence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUSPENDED_SENTENCE, DefaultSuspended_sentence.class);
    }

    /**
     * Gets all instances of Suspended_sentence from the ontology.
     */
    public Collection<? extends Suspended_sentence> getAllSuspended_sentenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUSPENDED_SENTENCE, DefaultSuspended_sentence.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/theft
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/theft", Theft.class, DefaultTheft.class);
    }

    /**
     * Creates an instance of type Theft.  Modifies the underlying ontology.
     */
    public Theft createTheft(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THEFT, DefaultTheft.class);
    }

    /**
     * Gets an instance of type Theft with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Theft getTheft(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THEFT, DefaultTheft.class);
    }

    /**
     * Gets all instances of Theft from the ontology.
     */
    public Collection<? extends Theft> getAllTheftInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THEFT, DefaultTheft.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/time
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/time", Time.class, DefaultTime.class);
    }

    /**
     * Creates an instance of type Time.  Modifies the underlying ontology.
     */
    public Time createTime(String name) {
        return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TIME, DefaultTime.class);
    }

    public Time createTimeSubclass(String name) {
        return delegate.createSubclassWrappedIndividual(name, Vocabulary.CLASS_TIME, DefaultTime.class);
    }

    /**
     * Gets an instance of type Time with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Time getTime(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TIME, DefaultTime.class);
    }

    /**
     * Gets all instances of Time from the ontology.
     */
    public Collection<? extends Time> getAllTimeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TIME, DefaultTime.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/to_left
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/to_left", To_left.class, DefaultTo_left.class);
    }

    /**
     * Creates an instance of type To_left.  Modifies the underlying ontology.
     */
    public To_left createTo_left(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TO_LEFT, DefaultTo_left.class);
    }

    /**
     * Gets an instance of type To_left with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public To_left getTo_left(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TO_LEFT, DefaultTo_left.class);
    }

    /**
     * Gets all instances of To_left from the ontology.
     */
    public Collection<? extends To_left> getAllTo_leftInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TO_LEFT, DefaultTo_left.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/to_right
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/to_right", To_right.class, DefaultTo_right.class);
    }

    /**
     * Creates an instance of type To_right.  Modifies the underlying ontology.
     */
    public To_right createTo_right(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TO_RIGHT, DefaultTo_right.class);
    }

    /**
     * Gets an instance of type To_right with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public To_right getTo_right(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TO_RIGHT, DefaultTo_right.class);
    }

    /**
     * Gets all instances of To_right from the ontology.
     */
    public Collection<? extends To_right> getAllTo_rightInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TO_RIGHT, DefaultTo_right.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/tractor
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/tractor", Tractor.class, DefaultTractor.class);
    }

    /**
     * Creates an instance of type Tractor.  Modifies the underlying ontology.
     */
    public Tractor createTractor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRACTOR, DefaultTractor.class);
    }

    /**
     * Gets an instance of type Tractor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Tractor getTractor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRACTOR, DefaultTractor.class);
    }

    /**
     * Gets all instances of Tractor from the ontology.
     */
    public Collection<? extends Tractor> getAllTractorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRACTOR, DefaultTractor.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/traffic_code
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/traffic_code", Traffic_code.class, DefaultTraffic_code.class);
    }

    /**
     * Creates an instance of type Traffic_code.  Modifies the underlying ontology.
     */
    public Traffic_code createTraffic_code(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRAFFIC_CODE, DefaultTraffic_code.class);
    }

    /**
     * Gets an instance of type Traffic_code with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Traffic_code getTraffic_code(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRAFFIC_CODE, DefaultTraffic_code.class);
    }

    /**
     * Gets all instances of Traffic_code from the ontology.
     */
    public Collection<? extends Traffic_code> getAllTraffic_codeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRAFFIC_CODE, DefaultTraffic_code.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/traffic_island
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/traffic_island", Traffic_island.class, DefaultTraffic_island.class);
    }

    /**
     * Creates an instance of type Traffic_island.  Modifies the underlying ontology.
     */
    public Traffic_island createTraffic_island(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRAFFIC_ISLAND, DefaultTraffic_island.class);
    }

    /**
     * Gets an instance of type Traffic_island with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Traffic_island getTraffic_island(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRAFFIC_ISLAND, DefaultTraffic_island.class);
    }

    /**
     * Gets all instances of Traffic_island from the ontology.
     */
    public Collection<? extends Traffic_island> getAllTraffic_islandInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRAFFIC_ISLAND, DefaultTraffic_island.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/traffic_lights
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/traffic_lights", Traffic_lights.class, DefaultTraffic_lights.class);
    }

    /**
     * Creates an instance of type Traffic_lights.  Modifies the underlying ontology.
     */
    public Traffic_lights createTraffic_lights(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRAFFIC_LIGHTS, DefaultTraffic_lights.class);
    }

    /**
     * Gets an instance of type Traffic_lights with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Traffic_lights getTraffic_lights(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRAFFIC_LIGHTS, DefaultTraffic_lights.class);
    }

    /**
     * Gets all instances of Traffic_lights from the ontology.
     */
    public Collection<? extends Traffic_lights> getAllTraffic_lightsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRAFFIC_LIGHTS, DefaultTraffic_lights.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/traffic_type
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/traffic_type", Traffic_type.class, DefaultTraffic_type.class);
    }

    /**
     * Creates an instance of type Traffic_type.  Modifies the underlying ontology.
     */
    public Traffic_type createTraffic_type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRAFFIC_TYPE, DefaultTraffic_type.class);
    }

    /**
     * Gets an instance of type Traffic_type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Traffic_type getTraffic_type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRAFFIC_TYPE, DefaultTraffic_type.class);
    }

    /**
     * Gets all instances of Traffic_type from the ontology.
     */
    public Collection<? extends Traffic_type> getAllTraffic_typeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRAFFIC_TYPE, DefaultTraffic_type.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/train
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/train", Train.class, DefaultTrain.class);
    }

    /**
     * Creates an instance of type Train.  Modifies the underlying ontology.
     */
    public Train createTrain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRAIN, DefaultTrain.class);
    }

    /**
     * Gets an instance of type Train with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Train getTrain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRAIN, DefaultTrain.class);
    }

    /**
     * Gets all instances of Train from the ontology.
     */
    public Collection<? extends Train> getAllTrainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRAIN, DefaultTrain.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/tram
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/tram", Tram.class, DefaultTram.class);
    }

    /**
     * Creates an instance of type Tram.  Modifies the underlying ontology.
     */
    public Tram createTram(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRAM, DefaultTram.class);
    }

    /**
     * Gets an instance of type Tram with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Tram getTram(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRAM, DefaultTram.class);
    }

    /**
     * Gets all instances of Tram from the ontology.
     */
    public Collection<? extends Tram> getAllTramInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRAM, DefaultTram.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/trash
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/trash", Trash.class, DefaultTrash.class);
    }

    /**
     * Creates an instance of type Trash.  Modifies the underlying ontology.
     */
    public Trash createTrash(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRASH, DefaultTrash.class);
    }

    /**
     * Gets an instance of type Trash with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Trash getTrash(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRASH, DefaultTrash.class);
    }

    /**
     * Gets all instances of Trash from the ontology.
     */
    public Collection<? extends Trash> getAllTrashInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRASH, DefaultTrash.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/tree
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/tree", Tree.class, DefaultTree.class);
    }

    /**
     * Creates an instance of type Tree.  Modifies the underlying ontology.
     */
    public Tree createTree(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TREE, DefaultTree.class);
    }

    /**
     * Gets an instance of type Tree with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Tree getTree(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TREE, DefaultTree.class);
    }

    /**
     * Gets all instances of Tree from the ontology.
     */
    public Collection<? extends Tree> getAllTreeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TREE, DefaultTree.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/trial_still_in_process
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/trial_still_in_process", Trial_still_in_process.class, DefaultTrial_still_in_process.class);
    }

    /**
     * Creates an instance of type Trial_still_in_process.  Modifies the underlying ontology.
     */
    public Trial_still_in_process createTrial_still_in_process(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRIAL_STILL_IN_PROCESS, DefaultTrial_still_in_process.class);
    }

    /**
     * Gets an instance of type Trial_still_in_process with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Trial_still_in_process getTrial_still_in_process(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRIAL_STILL_IN_PROCESS, DefaultTrial_still_in_process.class);
    }

    /**
     * Gets all instances of Trial_still_in_process from the ontology.
     */
    public Collection<? extends Trial_still_in_process> getAllTrial_still_in_processInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRIAL_STILL_IN_PROCESS, DefaultTrial_still_in_process.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/trolley
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/trolley", Trolley.class, DefaultTrolley.class);
    }

    /**
     * Creates an instance of type Trolley.  Modifies the underlying ontology.
     */
    public Trolley createTrolley(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TROLLEY, DefaultTrolley.class);
    }

    /**
     * Gets an instance of type Trolley with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Trolley getTrolley(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TROLLEY, DefaultTrolley.class);
    }

    /**
     * Gets all instances of Trolley from the ontology.
     */
    public Collection<? extends Trolley> getAllTrolleyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TROLLEY, DefaultTrolley.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/truck
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/truck", Truck.class, DefaultTruck.class);
    }

    /**
     * Creates an instance of type Truck.  Modifies the underlying ontology.
     */
    public Truck createTruck(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRUCK, DefaultTruck.class);
    }

    /**
     * Gets an instance of type Truck with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Truck getTruck(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRUCK, DefaultTruck.class);
    }

    /**
     * Gets all instances of Truck from the ontology.
     */
    public Collection<? extends Truck> getAllTruckInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRUCK, DefaultTruck.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/trunk_road
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/trunk_road", Trunk_road.class, DefaultTrunk_road.class);
    }

    /**
     * Creates an instance of type Trunk_road.  Modifies the underlying ontology.
     */
    public Trunk_road createTrunk_road(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRUNK_ROAD, DefaultTrunk_road.class);
    }

    /**
     * Gets an instance of type Trunk_road with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Trunk_road getTrunk_road(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRUNK_ROAD, DefaultTrunk_road.class);
    }

    /**
     * Gets all instances of Trunk_road from the ontology.
     */
    public Collection<? extends Trunk_road> getAllTrunk_roadInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRUNK_ROAD, DefaultTrunk_road.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/tunnel
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/tunnel", Tunnel.class, DefaultTunnel.class);
    }

    /**
     * Creates an instance of type Tunnel.  Modifies the underlying ontology.
     */
    public Tunnel createTunnel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TUNNEL, DefaultTunnel.class);
    }

    /**
     * Gets an instance of type Tunnel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Tunnel getTunnel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TUNNEL, DefaultTunnel.class);
    }

    /**
     * Gets all instances of Tunnel from the ontology.
     */
    public Collection<? extends Tunnel> getAllTunnelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TUNNEL, DefaultTunnel.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/turn
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/turn", Turn.class, DefaultTurn.class);
    }

    /**
     * Creates an instance of type Turn.  Modifies the underlying ontology.
     */
    public Turn createTurn(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TURN, DefaultTurn.class);
    }

    /**
     * Gets an instance of type Turn with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Turn getTurn(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TURN, DefaultTurn.class);
    }

    /**
     * Gets all instances of Turn from the ontology.
     */
    public Collection<? extends Turn> getAllTurnInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TURN, DefaultTurn.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/turn_left
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/turn_left", Turn_left.class, DefaultTurn_left.class);
    }

    /**
     * Creates an instance of type Turn_left.  Modifies the underlying ontology.
     */
    public Turn_left createTurn_left(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TURN_LEFT, DefaultTurn_left.class);
    }

    /**
     * Gets an instance of type Turn_left with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Turn_left getTurn_left(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TURN_LEFT, DefaultTurn_left.class);
    }

    /**
     * Gets all instances of Turn_left from the ontology.
     */
    public Collection<? extends Turn_left> getAllTurn_leftInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TURN_LEFT, DefaultTurn_left.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/turn_right
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/turn_right", Turn_right.class, DefaultTurn_right.class);
    }

    /**
     * Creates an instance of type Turn_right.  Modifies the underlying ontology.
     */
    public Turn_right createTurn_right(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TURN_RIGHT, DefaultTurn_right.class);
    }

    /**
     * Gets an instance of type Turn_right with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Turn_right getTurn_right(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TURN_RIGHT, DefaultTurn_right.class);
    }

    /**
     * Gets all instances of Turn_right from the ontology.
     */
    public Collection<? extends Turn_right> getAllTurn_rightInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TURN_RIGHT, DefaultTurn_right.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/two_ways_road
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/two_ways_road", Two_ways_road.class, DefaultTwo_ways_road.class);
    }

    /**
     * Creates an instance of type Two_ways_road.  Modifies the underlying ontology.
     */
    public Two_ways_road createTwo_ways_road(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TWO_WAYS_ROAD, DefaultTwo_ways_road.class);
    }

    /**
     * Gets an instance of type Two_ways_road with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Two_ways_road getTwo_ways_road(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TWO_WAYS_ROAD, DefaultTwo_ways_road.class);
    }

    /**
     * Gets all instances of Two_ways_road from the ontology.
     */
    public Collection<? extends Two_ways_road> getAllTwo_ways_roadInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TWO_WAYS_ROAD, DefaultTwo_ways_road.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/type_of_crime
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/type_of_crime", Type_of_crime.class, DefaultType_of_crime.class);
    }

    /**
     * Creates an instance of type Type_of_crime.  Modifies the underlying ontology.
     */
    public Type_of_crime createType_of_crime(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TYPE_OF_CRIME, DefaultType_of_crime.class);
    }

    /**
     * Gets an instance of type Type_of_crime with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Type_of_crime getType_of_crime(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TYPE_OF_CRIME, DefaultType_of_crime.class);
    }

    /**
     * Gets all instances of Type_of_crime from the ontology.
     */
    public Collection<? extends Type_of_crime> getAllType_of_crimeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TYPE_OF_CRIME, DefaultType_of_crime.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/type_of_sentence
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/type_of_sentence", Type_of_sentence.class, DefaultType_of_sentence.class);
    }

    /**
     * Creates an instance of type Type_of_sentence.  Modifies the underlying ontology.
     */
    public Type_of_sentence createType_of_sentence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TYPE_OF_SENTENCE, DefaultType_of_sentence.class);
    }

    /**
     * Gets an instance of type Type_of_sentence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Type_of_sentence getType_of_sentence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TYPE_OF_SENTENCE, DefaultType_of_sentence.class);
    }

    /**
     * Gets all instances of Type_of_sentence from the ontology.
     */
    public Collection<? extends Type_of_sentence> getAllType_of_sentenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TYPE_OF_SENTENCE, DefaultType_of_sentence.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/van
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/van", Van.class, DefaultVan.class);
    }

    /**
     * Creates an instance of type Van.  Modifies the underlying ontology.
     */
    public Van createVan(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VAN, DefaultVan.class);
    }

    /**
     * Gets an instance of type Van with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Van getVan(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VAN, DefaultVan.class);
    }

    /**
     * Gets all instances of Van from the ontology.
     */
    public Collection<? extends Van> getAllVanInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VAN, DefaultVan.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/vehicle
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/vehicle", Vehicle.class, DefaultVehicle.class);
    }

    /**
     * Creates an instance of type Vehicle.  Modifies the underlying ontology.
     */
    public Vehicle createVehicle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VEHICLE, DefaultVehicle.class);
    }

    public Vehicle createVehicleSubclass(String name) {
        return delegate.createSubclassWrappedIndividual(name, Vocabulary.CLASS_VEHICLE, DefaultVehicle.class);
    }

    /**
     * Gets an instance of type Vehicle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Vehicle getVehicle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VEHICLE, DefaultVehicle.class);
    }

    /**
     * Gets all instances of Vehicle from the ontology.
     */
    public Collection<? extends Vehicle> getAllVehicleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VEHICLE, DefaultVehicle.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/very_close
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/very_close", Very_close.class, DefaultVery_close.class);
    }

    /**
     * Creates an instance of type Very_close.  Modifies the underlying ontology.
     */
    public Very_close createVery_close(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VERY_CLOSE, DefaultVery_close.class);
    }

    /**
     * Gets an instance of type Very_close with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Very_close getVery_close(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VERY_CLOSE, DefaultVery_close.class);
    }

    /**
     * Gets all instances of Very_close from the ontology.
     */
    public Collection<? extends Very_close> getAllVery_closeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VERY_CLOSE, DefaultVery_close.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/wait_at_crossing
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/wait_at_crossing", Wait_at_crossing.class, DefaultWait_at_crossing.class);
    }

    /**
     * Creates an instance of type Wait_at_crossing.  Modifies the underlying ontology.
     */
    public Wait_at_crossing createWait_at_crossing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WAIT_AT_CROSSING, DefaultWait_at_crossing.class);
    }

    /**
     * Gets an instance of type Wait_at_crossing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Wait_at_crossing getWait_at_crossing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WAIT_AT_CROSSING, DefaultWait_at_crossing.class);
    }

    /**
     * Gets all instances of Wait_at_crossing from the ontology.
     */
    public Collection<? extends Wait_at_crossing> getAllWait_at_crossingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WAIT_AT_CROSSING, DefaultWait_at_crossing.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/walk
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/walk", Walk.class, DefaultWalk.class);
    }

    /**
     * Creates an instance of type Walk.  Modifies the underlying ontology.
     */
    public Walk createWalk(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WALK, DefaultWalk.class);
    }

    /**
     * Gets an instance of type Walk with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Walk getWalk(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WALK, DefaultWalk.class);
    }

    /**
     * Gets all instances of Walk from the ontology.
     */
    public Collection<? extends Walk> getAllWalkInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WALK, DefaultWalk.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/wall
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/wall", Wall.class, DefaultWall.class);
    }

    /**
     * Creates an instance of type Wall.  Modifies the underlying ontology.
     */
    public Wall createWall(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WALL, DefaultWall.class);
    }

    /**
     * Gets an instance of type Wall with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Wall getWall(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WALL, DefaultWall.class);
    }

    /**
     * Gets all instances of Wall from the ontology.
     */
    public Collection<? extends Wall> getAllWallInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WALL, DefaultWall.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/weather
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/weather", Weather.class, DefaultWeather.class);
    }

    /**
     * Creates an instance of type Weather.  Modifies the underlying ontology.
     */
    public Weather createWeather(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WEATHER, DefaultWeather.class);
    }

    public Weather createWeatherSubclass(String name) {
        return delegate.createSubclassWrappedIndividual(name, Vocabulary.CLASS_WEATHER, DefaultWeather.class);
    }

    /**
     * Gets an instance of type Weather with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Weather getWeather(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WEATHER, DefaultWeather.class);
    }

    /**
     * Gets all instances of Weather from the ontology.
     */
    public Collection<? extends Weather> getAllWeatherInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WEATHER, DefaultWeather.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/wild
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/wild", Wild.class, DefaultWild.class);
    }

    /**
     * Creates an instance of type Wild.  Modifies the underlying ontology.
     */
    public Wild createWild(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WILD, DefaultWild.class);
    }

    /**
     * Gets an instance of type Wild with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Wild getWild(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WILD, DefaultWild.class);
    }

    /**
     * Gets all instances of Wild from the ontology.
     */
    public Collection<? extends Wild> getAllWildInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WILD, DefaultWild.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/yellow
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/yellow", Yellow.class, DefaultYellow.class);
    }

    /**
     * Creates an instance of type Yellow.  Modifies the underlying ontology.
     */
    public Yellow createYellow(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_YELLOW, DefaultYellow.class);
    }

    /**
     * Gets an instance of type Yellow with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Yellow getYellow(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_YELLOW, DefaultYellow.class);
    }

    /**
     * Gets all instances of Yellow from the ontology.
     */
    public Collection<? extends Yellow> getAllYellowInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_YELLOW, DefaultYellow.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/cliff/edge
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/cliff/edge", Edge.class, DefaultEdge.class);
    }

    /**
     * Creates an instance of type Edge.  Modifies the underlying ontology.
     */
    public Edge createEdge(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EDGE, DefaultEdge.class);
    }

    /**
     * Gets an instance of type Edge with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Edge getEdge(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EDGE, DefaultEdge.class);
    }

    /**
     * Gets all instances of Edge from the ontology.
     */
    public Collection<? extends Edge> getAllEdgeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EDGE, DefaultEdge.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/project/BDGSqwMbfBgw7pUJ8IOnJ1#disability
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/project/BDGSqwMbfBgw7pUJ8IOnJ1#disability", Disability.class, DefaultDisability.class);
    }

    /**
     * Creates an instance of type Disability.  Modifies the underlying ontology.
     */
    public Disability createDisability(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DISABILITY, DefaultDisability.class);
    }

    /**
     * Gets an instance of type Disability with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Disability getDisability(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DISABILITY, DefaultDisability.class);
    }

    /**
     * Gets all instances of Disability from the ontology.
     */
    public Collection<? extends Disability> getAllDisabilityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DISABILITY, DefaultDisability.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/project/BDGSqwMbfBgw7pUJ8IOnJ1#health_consequence
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/project/BDGSqwMbfBgw7pUJ8IOnJ1#health_consequence", Health_consequence.class, DefaultHealth_consequence.class);
    }

    /**
     * Creates an instance of type Health_consequence.  Modifies the underlying ontology.
     */
    public Health_consequence createHealth_consequence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HEALTH_CONSEQUENCE, DefaultHealth_consequence.class);
    }

    /**
     * Gets an instance of type Health_consequence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Health_consequence getHealth_consequence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HEALTH_CONSEQUENCE, DefaultHealth_consequence.class);
    }

    /**
     * Gets all instances of Health_consequence from the ontology.
     */
    public Collection<? extends Health_consequence> getAllHealth_consequenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HEALTH_CONSEQUENCE, DefaultHealth_consequence.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/project/BDGSqwMbfBgw7pUJ8IOnJ1#law_consequence
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/project/BDGSqwMbfBgw7pUJ8IOnJ1#law_consequence", Law_consequence.class, DefaultLaw_consequence.class);
    }

    /**
     * Creates an instance of type Law_consequence.  Modifies the underlying ontology.
     */
    public Law_consequence createLaw_consequence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LAW_CONSEQUENCE, DefaultLaw_consequence.class);
    }

    /**
     * Gets an instance of type Law_consequence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Law_consequence getLaw_consequence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LAW_CONSEQUENCE, DefaultLaw_consequence.class);
    }

    /**
     * Gets all instances of Law_consequence from the ontology.
     */
    public Collection<? extends Law_consequence> getAllLaw_consequenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LAW_CONSEQUENCE, DefaultLaw_consequence.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/project/BDGSqwMbfBgw7pUJ8IOnJ1#lightly_injured
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/project/BDGSqwMbfBgw7pUJ8IOnJ1#lightly_injured", Lightly_injured.class, DefaultLightly_injured.class);
    }

    /**
     * Creates an instance of type Lightly_injured.  Modifies the underlying ontology.
     */
    public Lightly_injured createLightly_injured(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LIGHTLY_INJURED, DefaultLightly_injured.class);
    }

    /**
     * Gets an instance of type Lightly_injured with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Lightly_injured getLightly_injured(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LIGHTLY_INJURED, DefaultLightly_injured.class);
    }

    /**
     * Gets all instances of Lightly_injured from the ontology.
     */
    public Collection<? extends Lightly_injured> getAllLightly_injuredInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LIGHTLY_INJURED, DefaultLightly_injured.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/project/BDGSqwMbfBgw7pUJ8IOnJ1#material_consequence
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/project/BDGSqwMbfBgw7pUJ8IOnJ1#material_consequence", Material_consequence.class, DefaultMaterial_consequence.class);
    }

    /**
     * Creates an instance of type Material_consequence.  Modifies the underlying ontology.
     */
    public Material_consequence createMaterial_consequence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MATERIAL_CONSEQUENCE, DefaultMaterial_consequence.class);
    }

    /**
     * Gets an instance of type Material_consequence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Material_consequence getMaterial_consequence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MATERIAL_CONSEQUENCE, DefaultMaterial_consequence.class);
    }

    /**
     * Gets all instances of Material_consequence from the ontology.
     */
    public Collection<? extends Material_consequence> getAllMaterial_consequenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MATERIAL_CONSEQUENCE, DefaultMaterial_consequence.class);
    }


    /* ***************************************************
     * Class http://webprotege.stanford.edu/project/BDGSqwMbfBgw7pUJ8IOnJ1#severly_injured
     */

    {
        javaMapping.add("http://webprotege.stanford.edu/project/BDGSqwMbfBgw7pUJ8IOnJ1#severly_injured", Severly_injured.class, DefaultSeverly_injured.class);
    }

    /**
     * Creates an instance of type Severly_injured.  Modifies the underlying ontology.
     */
    public Severly_injured createSeverly_injured(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SEVERLY_INJURED, DefaultSeverly_injured.class);
    }

    /**
     * Gets an instance of type Severly_injured with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Severly_injured getSeverly_injured(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SEVERLY_INJURED, DefaultSeverly_injured.class);
    }

    /**
     * Gets all instances of Severly_injured from the ontology.
     */
    public Collection<? extends Severly_injured> getAllSeverly_injuredInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SEVERLY_INJURED, DefaultSeverly_injured.class);
    }


}
